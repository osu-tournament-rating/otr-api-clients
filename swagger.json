{
  "openapi": "3.0.1",
  "info": {
    "title": "osu! Tournament Rating API",
    "description": "The official resource for reading and writing data within the osu! Tournament Rating platform.",
    "version": "v1"
  },
  "paths": {
    "/api/v1/beatmaps": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "List all beatmaps",
        "operationId": "Beatmaps_list",
        "responses": {
          "200": {
            "description": "Returns all beatmaps",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/beatmaps/{key}": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "Get a beatmap by versatile search",
        "description": "Get a beatmap searching first by id, then by osu! beatmap id",
        "operationId": "Beatmaps_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a beatmap for the search key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a beatmap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/clients/{id}/ratelimit": {
      "patch": {
        "tags": [
          "Clients"
        ],
        "operationId": "Clients_patchRatelimit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/filtering": {
      "post": {
        "tags": [
          "Filtering"
        ],
        "summary": "Filter a list of users based on the criteria as described in\r\nAPI.DTOs.FilteringResultDTO",
        "operationId": "Filtering_filter",
        "requestBody": {
          "description": "The filtering request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequestDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Errors encountered during validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The filtering result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/games/{id}": {
      "patch": {
        "tags": [
          "Games"
        ],
        "summary": "Amend game data",
        "operationId": "Games_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If the provided id does not belong to a game",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the patched game",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/gamescores/{id}": {
      "patch": {
        "tags": [
          "GameScores"
        ],
        "summary": "Amend score data",
        "operationId": "GameScores_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If the provided id does not belong to a score",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the patched score",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "operationId": "Leaderboards_get",
        "parameters": [
          {
            "name": "Ruleset",
            "in": "query",
            "description": "\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ChartType",
            "in": "query",
            "description": "\n\n0 = Global\n\n1 = Country",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/LeaderboardChartType"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/LeaderboardFilterDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Gets all matches",
        "description": "Results are ordered by id and support pagination. All match data is included.",
        "operationId": "Matches_list",
        "parameters": [
          {
            "name": "Ruleset",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a\r\nmatching Database.Enums.Ruleset\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a partially\r\nmatching Database.Entities.Match.Name",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateMin",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a\r\nDatabase.Entities.Match.StartTime greater than this value",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateMax",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with an\r\nDatabase.Entities.Match.EndTime less than this value",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "VerificationStatus",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a\r\nmatching Database.Enums.Verification.VerificationStatus\n\n0 = None (Verification status has not yet been assigned)\n\n1 = PreRejected (The Data Worker has identified an issue during processing)\n\n2 = PreVerified (The Data Worker has not identified any issues during processing)\n\n3 = Rejected (Determined to be unfit for ratings by manual review)\n\n4 = Verified (Determined to be fit for ratings by manual review)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/VerificationStatus"
            }
          },
          {
            "name": "RejectionReason",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a matching Database.Enums.Verification.MatchRejectionReason\n\n0 = None (The Database.Entities.Match is not rejected)\n\n1 = NoData (The osu! API returned invalid data or no data for the Database.Entities.Match)\n\n2 = NoGames (The osu! API returned no Database.Entities.Games for the Database.Entities.Match)\n\n4 = InvalidName (The Database.Entities.Match's Database.Entities.Match.Name does not follow tournament lobby title conventions)\n\n8 = FailedTeamVsConversion (The Database.Entities.Match's !:Entities.Games were eligible for Database.Enums.TeamType.TeamVs\r\nconversion and attempting Database.Enums.TeamType.TeamVs conversion was not successful)\n\n16 = NoValidGames (The Database.Entities.Match has no Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified)\n\n32 = UnexpectedGameCount (The Database.Entities.Match's number of Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is not an odd number\r\n(does not satisfy \"best of X\"))\n\n64 = NoEndTime (The Database.Entities.Match's Database.Entities.Match.EndTime could not be determined)\n\n128 = RejectedTournament (The Database.Entities.Tournament the Database.Entities.Match was played in was rejected)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/MatchRejectionReason"
            }
          },
          {
            "name": "ProcessingStatus",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches with a matching Database.Enums.Verification.MatchProcessingStatus\n\n0 = NeedsData (The Database.Entities.Match needs data requested from the osu! API)\n\n1 = NeedsAutomationChecks (The Database.Entities.Match needs automation checks)\n\n2 = NeedsVerification (The Database.Entities.Match is awaiting verification from a\r\nDatabase.Entities.User with verifier permission)\n\n3 = NeedsStatCalculation (The Database.Entities.Match needs stat calculation (Generates the Database.Entities.MatchWinRecord and Database.Entities.PlayerMatchStats))\n\n4 = NeedsRatingProcessorData (The Database.Entities.Match is awaiting rating processor data (Generates all Database.Entities.Processor.RatingAdjustments))\n\n5 = Done (The Database.Entities.Match has completed all processing steps)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/MatchProcessingStatus"
            }
          },
          {
            "name": "SubmittedBy",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches where the id of the\r\nDatabase.Entities.User that submitted it matches this value",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "VerifiedBy",
            "in": "query",
            "description": "Filters results for Database.Entities.Matches where the id of the\r\nDatabase.Entities.User that verified it matches this value",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Controls the manner in which results are sorted\n\n0 = Id (Sort by primary key)\n\n1 = OsuId (Sort by osu! id)\n\n2 = StartTime (Sort by start start time)\n\n3 = EndTime (Sort by end time)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/MatchesQuerySortType"
            }
          },
          {
            "name": "SortDescending",
            "in": "query",
            "description": "Denotes whether to sort results in ascending or descending order",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Controls the number of matches to return. Functions as a \"page size\".\r\nDefault: 100 Constraints: Minimum 1, Maximum 5000",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Controls which block of size limit to return.\r\nDefault: 1, Constraints: Minimum 1",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the desired page of matches",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTOPagedResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/{id}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a match",
        "operationId": "Matches_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a match does not exist for the given id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Amend match data",
        "operationId": "Matches_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If the provided id does not belong to a match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the patched match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/matches/player/{osuId}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "operationId": "Matches_getMatches",
        "parameters": [
          {
            "name": "osuId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "x-enumNames": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "x-enumDescriptions": [
              "osu! (standard)",
              "osu! Taiko",
              "osu! Catch (aka Fruits)",
              "osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k)",
              "osu! Mania 4k variant",
              "osu! Mania 7k variant"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the currently logged in user",
        "operationId": "Me_get",
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "302": {
            "description": "Redirects to `GET` `/users/{id}`"
          }
        }
      }
    },
    "/api/v1/me/stats": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get player stats for the currently logged in user",
        "description": "If no ruleset is provided, the player's default is used. Database.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date",
        "operationId": "Me_getStats",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "x-enumNames": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "x-enumDescriptions": [
              "osu! (standard)",
              "osu! Taiko",
              "osu! Catch (aka Fruits)",
              "osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k)",
              "osu! Mania 4k variant",
              "osu! Mania 7k variant"
            ]
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "302": {
            "description": "Redirects to `GET` `/stats/{key}`"
          }
        }
      }
    },
    "/api/v1/me/settings/ruleset": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Update the ruleset for the currently logged in user",
        "operationId": "Me_updateRuleset",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Ruleset"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset`"
          }
        }
      }
    },
    "/api/v1/me/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Sync the ruleset of the currently logged in user to their osu! ruleset",
        "operationId": "Me_syncRuleset",
        "responses": {
          "401": {
            "description": "If the requester is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset:sync`"
          }
        }
      }
    },
    "/api/v1/oauth/authorize": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using an osu! authorization code",
        "operationId": "OAuth_authorize",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The osu! authorization code",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns user access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/oauth/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using client credentials",
        "operationId": "OAuth_authorizeClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "The id of the client",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientSecret",
            "in": "query",
            "description": "The secret of the client",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns client access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/oauth/client": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Create a new OAuth client",
        "description": "Client secret is only returned from creation.\r\nThe user will have to reset the secret if they lose access.",
        "operationId": "OAuth_createClient",
        "responses": {
          "401": {
            "description": "If the user is not properly authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns created client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/refresh": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Generate new access credentials from a valid refresh token",
        "description": "Generated access credentials will contain only a new access token,\r\nand the given refresh token is returned with it",
        "operationId": "OAuth_refresh",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns access credentials containing a new access token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponseDTO"
                }
              }
            }
          },
          "201": {
            "description": "If the given refresh token is invalid, or there was an error during authorization"
          }
        }
      }
    },
    "/api/v1/players/all": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "Players_getAll",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/players/{key}/info": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "Players_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for tournaments, matches, and users",
        "description": "Allows for partial or full searching on the names of tournaments, matches, and usernames",
        "operationId": "Search_search",
        "parameters": [
          {
            "name": "searchKey",
            "in": "query",
            "description": "The string to match against names of tournaments, matches, and usernames",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all possible tournaments, matches, and usernames for the given search key",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/{key}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get a player's stats",
        "description": "Gets player by versatile search.\r\nIf no ruleset is provided, the player's default is used. Database.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date",
        "operationId": "Stats_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key used in versatile search",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "x-enumNames": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "x-enumDescriptions": [
              "osu! (standard)",
              "osu! Taiko",
              "osu! Catch (aka Fruits)",
              "osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k)",
              "osu! Mania 4k variant",
              "osu! Mania 7k variant"
            ]
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a player does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player's stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/stats/histogram": {
      "get": {
        "tags": [
          "Stats"
        ],
        "operationId": "Stats_getRatingHistogram",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "x-enumNames": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "x-enumDescriptions": [
              "osu! (standard)",
              "osu! Taiko",
              "osu! Catch (aka Fruits)",
              "osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k)",
              "osu! Mania 4k variant",
              "osu! Mania 7k variant"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tournaments": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all tournaments",
        "description": "Will not include match data",
        "operationId": "Tournaments_list",
        "responses": {
          "200": {
            "description": "Returns all tournaments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Submit a tournament",
        "operationId": "Tournaments_create",
        "requestBody": {
          "description": "Tournament submission data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentSubmissionDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentSubmissionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentSubmissionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TournamentSubmissionDTO"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the given !:tournamentSubmission is malformed\r\nIf a tournament matching the given name and ruleset already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Returns location information for the created tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tournaments/{id}": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get a tournament",
        "operationId": "Tournaments_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unfiltered",
            "in": "query",
            "description": "If true, includes all match data, regardless of verification status.\r\n            Also includes all child navigations if true.\r\n            Default false (strictly verified data with limited navigation properties)",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Amend tournament data",
        "operationId": "Tournaments_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If the provided id does not belong to a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the patched tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tournaments/{id}/matches": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all matches from a tournament",
        "operationId": "Tournaments_listMatches",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all matches from a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "operationId": "Users_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/scopes": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's scopes",
        "operationId": "Users_updateScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of scopes to assign to the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If any of the given scopes are invalid, or the update was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns an updated user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/submissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's match submissions",
        "operationId": "Users_getSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of submissions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/submissions:reject": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Rejects a user's match submissions",
        "operationId": "Users_rejectSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Denotes the operation was successful"
          },
          "400": {
            "description": "If the operation was not successful"
          }
        }
      }
    },
    "/api/v1/users/{id}/clients": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's OAuth clients",
        "description": "All users have access to clients that they own. Admin users have access to clients from any user.",
        "operationId": "Users_getClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of OAuth clients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/clients/{clientId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's OAuth client",
        "description": "All users have access to delete clients that they own.\r\nAdmin users have access to clients from any user.",
        "operationId": "Users_deleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Id of the OAuth client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user or client does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the deletion was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "If the deletion was successful"
          }
        }
      }
    },
    "/api/v1/users/{id}/clients/{clientId}/secret:reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the secret of a user's OAuth client",
        "description": "All users have access to reset secrets of clients that they own.\r\nAdmin users have access to clients from any user.",
        "operationId": "Users_resetClientSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Id of the OAuth client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user or client does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the secret reset was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns new client credentials if the secret reset was successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sync the ruleset of a user with their osu! ruleset",
        "operationId": "Users_syncRuleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "If the operation was successful"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AggregatePlayerMatchStatsDTO": {
        "type": "object",
        "properties": {
          "averageMatchCostAggregate": {
            "type": "number",
            "description": "The player's average match cost during the period",
            "format": "double"
          },
          "highestRating": {
            "type": "number",
            "description": "The peak rating achieved by the player during the period",
            "format": "double"
          },
          "ratingGained": {
            "type": "number",
            "description": "The amount of rating gained from the start of the period to the end of the period",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The amount of games won during the period",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The amount of games lost during the period",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The amount of games played during the period",
            "format": "int32"
          },
          "matchesWon": {
            "type": "integer",
            "description": "The amount of matches won during the period",
            "format": "int32"
          },
          "matchesLost": {
            "type": "integer",
            "description": "The amount of matches lost during the period",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "The amount of matches played during the period",
            "format": "int32",
            "readOnly": true
          },
          "gameWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's game win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "matchWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's match win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "averageTeammateRating": {
            "type": "number",
            "description": "The average rating of the player's teammates during the period. This average does not include the player's own rating",
            "format": "double",
            "nullable": true
          },
          "averageOpponentRating": {
            "type": "number",
            "description": "The average rating of the player's opponents during the period",
            "format": "double",
            "nullable": true
          },
          "bestWinStreak": {
            "type": "integer",
            "description": "The most amount of matches won in a row during the period",
            "format": "int32"
          },
          "matchAverageScoreAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average score across the entire lobby. This average includes\r\nscores for games the player may have not been in for",
            "format": "double"
          },
          "matchAverageMissesAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average miss count of the lobby, across all games in that match",
            "format": "double"
          },
          "matchAverageAccuracyAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average accuracy of the lobby, across all games in that match",
            "format": "double"
          },
          "averageGamesPlayedAggregate": {
            "type": "number",
            "description": "The amount of maps the player participates in, on average.",
            "format": "double"
          },
          "averagePlacingAggregate": {
            "type": "number",
            "description": "The average lobby ranking the player has on maps they participate in.\r\nA top-score is 1, bottom score would be team size * 2",
            "format": "double"
          },
          "periodStart": {
            "type": "string",
            "description": "The beginning of the period for which the statistics are calculated.",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The end of the period for which the statistics are calculated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Represents an aggregate of match statistics for a player during a period of time"
      },
      "BeatmapDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the beatmap",
            "format": "int32"
          },
          "artist": {
            "type": "string",
            "description": "Artist of the song"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the beatmap",
            "format": "int64"
          },
          "bpm": {
            "type": "number",
            "description": "Beats per minute",
            "format": "double",
            "nullable": true
          },
          "mapperId": {
            "type": "integer",
            "description": "osu! id of the mapper",
            "format": "int64"
          },
          "mapperName": {
            "type": "string",
            "description": "osu! username of the mapper"
          },
          "sr": {
            "type": "number",
            "description": "Star rating",
            "format": "double"
          },
          "cs": {
            "type": "number",
            "description": "Circle size",
            "format": "double"
          },
          "ar": {
            "type": "number",
            "description": "Approach rate",
            "format": "double"
          },
          "hp": {
            "type": "number",
            "description": "Hp",
            "format": "double"
          },
          "od": {
            "type": "number",
            "description": "Overall difficulty",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "Song length",
            "format": "double"
          },
          "title": {
            "type": "string",
            "description": "Title of the beatmap / song"
          },
          "diffName": {
            "type": "string",
            "description": "Name of the difficulty",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a beatmap"
      },
      "CreatedAtRouteValues": {
        "type": "object",
        "properties": {
          "routeValues": {
            "description": "Any route or query parameters that must be included in the URI",
            "nullable": true
          },
          "action": {
            "type": "string",
            "description": "The controller method that produces the resource",
            "nullable": true
          },
          "controller": {
            "type": "string",
            "description": "The controller that produces the resource",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents data for constructing Microsoft.AspNetCore.Mvc.CreatedResult"
      },
      "FilteringFailReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "description": "Explains why the player failed filtering\n\n0 = None (The player passed filtering, thus there is no failure reason)\n\n1 = NoData (The player does not have a rating / profile in the o!TR database)\n\n2 = MinRating (The player's rating is below the minimum threshold)\n\n4 = MaxRating (The player's rating is above the maximum threshold)\n\n8 = IsProvisional (The player is provisional and the filtering criteria specifies\r\nexclusion of provisional players)\n\n16 = NotEnoughTournaments (The player has not played in the minimum specified\r\namount of tournaments)\n\n32 = PeakRatingTooHigh (The player's all-time peak rating is above the maximum allowed)\n\n64 = NotEnoughMatches (The player has not played in the minimum specified amount of matches)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "NoData",
          "MinRating",
          "MaxRating",
          "IsProvisional",
          "NotEnoughTournaments",
          "PeakRatingTooHigh",
          "NotEnoughMatches"
        ],
        "x-enumDescriptions": [
          "The player passed filtering, thus there is no failure reason",
          "The player does not have a rating / profile in the o!TR database",
          "The player's rating is below the minimum threshold",
          "The player's rating is above the maximum threshold",
          "The player is provisional and the filtering criteria specifies\r\nexclusion of provisional players",
          "The player has not played in the minimum specified\r\namount of tournaments",
          "The player's all-time peak rating is above the maximum allowed",
          "The player has not played in the minimum specified amount of matches"
        ],
        "x-bitwiseFlag": true
      },
      "FilteringRequestDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "minRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating below this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating above this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "allowProvisional": {
            "type": "boolean",
            "description": "Whether to filter players that currently have a provisional rating"
          },
          "tournamentsPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have participated in at least\r\nthis many distinct tournaments",
            "format": "int32",
            "nullable": true
          },
          "peakRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "If set, requires players to have an all-time peak rating less than\r\nthis value",
            "format": "int32",
            "nullable": true
          },
          "matchesPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have played in at least\r\nthis many matches",
            "format": "int32",
            "nullable": true
          },
          "osuPlayerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of osu! player ids that will be filtered"
          }
        },
        "additionalProperties": false,
        "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
      },
      "FilteringResult": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Indicates whether a player passed or failed filtering\n\n0 = Pass (Indicates the player passed filtering)\n\n1 = Fail (Indicates the player failed filtering)",
        "format": "int32",
        "x-enumNames": [
          "Pass",
          "Fail"
        ],
        "x-enumDescriptions": [
          "Indicates the player passed filtering",
          "Indicates the player failed filtering"
        ]
      },
      "FilteringResultDTO": {
        "type": "object",
        "properties": {
          "playersPassed": {
            "type": "integer",
            "description": "The number of players who passed filtering",
            "format": "int32"
          },
          "playersFailed": {
            "type": "integer",
            "description": "The number of players who failed filtering",
            "format": "int32"
          },
          "filteringResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFilteringResultDTO"
            },
            "description": "A collection of filtering results, one per submitted player,\r\nin the same order as submitted in the API.DTOs.FilteringRequestDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents a filterings result for a collection of players"
      },
      "GameDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the game",
            "format": "int32"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "scoringType": {
            "$ref": "#/components/schemas/ScoringType"
          },
          "teamType": {
            "$ref": "#/components/schemas/TeamType"
          },
          "mods": {
            "$ref": "#/components/schemas/Mods"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the game",
            "format": "int64"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "processingStatus": {
            "$ref": "#/components/schemas/GameProcessingStatus"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/GameRejectionReason"
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp of the beginning of the game",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp of the end of the game",
            "format": "date-time",
            "nullable": true
          },
          "beatmap": {
            "$ref": "#/components/schemas/BeatmapDTO"
          },
          "scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameScoreDTO"
            },
            "description": "All match scores for the game"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single game (osu! beatmap) played in a match"
      },
      "GameProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Game in the processing flow\n\n0 = NeedsAutomationChecks (The Database.Entities.Game needs automation checks)\n\n1 = NeedsVerification (The Database.Entities.Game is awaiting verification from a\r\nDatabase.Entities.User with verifier permission)\n\n2 = NeedsStatCalculation (The Database.Entities.Game needs stat calculation (Generates the Database.Entities.GameWinRecord))\n\n3 = Done (The Database.Entities.Game has completed all processing steps)",
        "format": "int32",
        "x-enumNames": [
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Game needs automation checks",
          "The Database.Entities.Game is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Game needs stat calculation (Generates the Database.Entities.GameWinRecord)",
          "The Database.Entities.Game has completed all processing steps"
        ]
      },
      "GameRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Game is rejected\n\n0 = None (The Database.Entities.Game is not rejected)\n\n1 = NoScores (The Database.Entities.Game's osu! API data did not contain any Database.Entities.GameScores)\n\n2 = InvalidMods (The Database.Entities.Game has invalid mods applied)\n\n4 = RulesetMismatch (The Database.Entities.Game's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament)\n\n8 = InvalidScoringType (The Database.Entities.Game's Database.Enums.ScoringType is not Database.Enums.ScoringType.ScoreV2)\n\n16 = InvalidTeamType (The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs)\n\n32 = FailedTeamVsConversion (The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs\r\nand attempting Database.Enums.TeamType.TeamVs conversion was not successful)\n\n64 = NoValidScores (The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is < 2)\n\n128 = LobbySizeMismatch (The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified divided by 2 is\r\nnot equal to the Database.Entities.Tournament.LobbySize of the parent Database.Entities.Tournament)\n\n256 = NoEndTime (The Database.Entities.Game's Database.Entities.Game.EndTime could not be determined)\n\n512 = RejectedMatch (The Database.Entities.Match the Database.Entities.Game was played in was rejected)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "NoScores",
          "InvalidMods",
          "RulesetMismatch",
          "InvalidScoringType",
          "InvalidTeamType",
          "FailedTeamVsConversion",
          "NoValidScores",
          "LobbySizeMismatch",
          "NoEndTime",
          "RejectedMatch"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Game is not rejected",
          "The Database.Entities.Game's osu! API data did not contain any Database.Entities.GameScores",
          "The Database.Entities.Game has invalid mods applied",
          "The Database.Entities.Game's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament",
          "The Database.Entities.Game's Database.Enums.ScoringType is not Database.Enums.ScoringType.ScoreV2",
          "The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs",
          "The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs\r\nand attempting Database.Enums.TeamType.TeamVs conversion was not successful",
          "The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is < 2",
          "The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified divided by 2 is\r\nnot equal to the Database.Entities.Tournament.LobbySize of the parent Database.Entities.Tournament",
          "The Database.Entities.Game's Database.Entities.Game.EndTime could not be determined",
          "The Database.Entities.Match the Database.Entities.Game was played in was rejected"
        ],
        "x-bitwiseFlag": true
      },
      "GameScoreDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the Player this score belongs to",
            "format": "int32"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "score": {
            "type": "integer",
            "description": "The points earned",
            "format": "int32"
          },
          "mods": {
            "$ref": "#/components/schemas/Mods"
          },
          "misses": {
            "type": "integer",
            "description": "The number of missed notes",
            "format": "int32"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "processingStatus": {
            "$ref": "#/components/schemas/ScoreProcessingStatus"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/ScoreRejectionReason"
          },
          "accuracy": {
            "type": "number",
            "description": "The accuracy of the score",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardChartType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "\n\n0 = Global\n\n1 = Country",
        "format": "int32",
        "x-enumNames": [
          "Global",
          "Country"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "LeaderboardDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "totalPlayerCount": {
            "type": "integer",
            "format": "int32"
          },
          "filterDefaults": {
            "$ref": "#/components/schemas/LeaderboardFilterDefaultsDTO"
          },
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardPlayerInfoDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "LeaderboardFilterDTO": {
        "type": "object",
        "properties": {
          "minRank": {
            "type": "integer",
            "description": "The \"better\" inclusive bound (ranges from 1+)",
            "format": "int32",
            "nullable": true
          },
          "maxRank": {
            "type": "integer",
            "description": "The \"worse\" inclusive bound (ranges from 1+)",
            "format": "int32",
            "nullable": true
          },
          "minRating": {
            "type": "integer",
            "description": "The lower-performing rating bound (ranges from 100+)",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "type": "integer",
            "description": "The higher-performing rating bound (ranges from 100+)",
            "format": "int32",
            "nullable": true
          },
          "minMatches": {
            "type": "integer",
            "description": "The minimum number of matches played (ranges from 1-10000)",
            "format": "int32",
            "nullable": true
          },
          "maxMatches": {
            "type": "integer",
            "description": "The maximum number of matches played (ranges from 1-10000)",
            "format": "int32",
            "nullable": true
          },
          "minWinRate": {
            "type": "number",
            "description": "Ranges from 0.00-1.00",
            "format": "double",
            "nullable": true
          },
          "maxWinRate": {
            "type": "number",
            "description": "Ranges from 0.00-1.00",
            "format": "double",
            "nullable": true
          },
          "tierFilters": {
            "$ref": "#/components/schemas/LeaderboardTierFilterDTO"
          }
        },
        "additionalProperties": false,
        "description": "Filters for the leaderboard"
      },
      "LeaderboardFilterDefaultsDTO": {
        "type": "object",
        "properties": {
          "maxRank": {
            "type": "integer",
            "format": "int32"
          },
          "maxRating": {
            "type": "number",
            "format": "double"
          },
          "maxMatches": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardPlayerInfoDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "format": "int64"
          },
          "globalRank": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "tier": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "matchesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Individual line items in the leaderboard"
      },
      "LeaderboardTierFilterDTO": {
        "type": "object",
        "properties": {
          "filterBronze": {
            "type": "boolean"
          },
          "filterSilver": {
            "type": "boolean"
          },
          "filterGold": {
            "type": "boolean"
          },
          "filterPlatinum": {
            "type": "boolean"
          },
          "filterEmerald": {
            "type": "boolean"
          },
          "filterDiamond": {
            "type": "boolean"
          },
          "filterMaster": {
            "type": "boolean"
          },
          "filterGrandmaster": {
            "type": "boolean"
          },
          "filterEliteGrandmaster": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "A collection of booleans representing which tiers to filter.\r\n            \r\nFalse = Default, no behavioral change\r\nTrue = Explicitly included in leaderboard results\r\n            \r\nIf *all* tiers are set to false, or all tiers are set to true, the leaderboard will return\r\nas if no tier filters were applied.\r\n            \r\nFor example, if Bronze and Emerald are true and everything else is false,\r\nthen only Bronze and Emerald players will show up in the leaderboard\r\n(specifically, Bronze III-I and Emerald III-I)"
      },
      "MatchCreatedResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "URL of where the new resource can be accessed"
          },
          "createdAtRouteValues": {
            "$ref": "#/components/schemas/CreatedAtRouteValues"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created match"
      },
      "MatchDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Title of the lobby"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "startTime": {
            "type": "string",
            "description": "Start time",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "description": "End time",
            "format": "date-time",
            "nullable": true
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/MatchRejectionReason"
          },
          "processingStatus": {
            "$ref": "#/components/schemas/MatchProcessingStatus"
          },
          "lastProcessingDate": {
            "type": "string",
            "description": "Timestamp of the last time the match was processed",
            "format": "date-time"
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameDTO"
            },
            "description": "List of games played during the match"
          }
        },
        "additionalProperties": false,
        "description": "Represents a played match"
      },
      "MatchDTOPagedResultDTO": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Link to the next potential page of results",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous potential page of results",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of results included",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDTO"
            },
            "description": "List of resulting data"
          }
        },
        "additionalProperties": false,
        "description": "Represents a paged list of results"
      },
      "MatchProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Match in the processing flow\n\n0 = NeedsData (The Database.Entities.Match needs data requested from the osu! API)\n\n1 = NeedsAutomationChecks (The Database.Entities.Match needs automation checks)\n\n2 = NeedsVerification (The Database.Entities.Match is awaiting verification from a\r\nDatabase.Entities.User with verifier permission)\n\n3 = NeedsStatCalculation (The Database.Entities.Match needs stat calculation (Generates the Database.Entities.MatchWinRecord and Database.Entities.PlayerMatchStats))\n\n4 = NeedsRatingProcessorData (The Database.Entities.Match is awaiting rating processor data (Generates all Database.Entities.Processor.RatingAdjustments))\n\n5 = Done (The Database.Entities.Match has completed all processing steps)",
        "format": "int32",
        "x-enumNames": [
          "NeedsData",
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "NeedsRatingProcessorData",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Match needs data requested from the osu! API",
          "The Database.Entities.Match needs automation checks",
          "The Database.Entities.Match is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Match needs stat calculation (Generates the Database.Entities.MatchWinRecord and Database.Entities.PlayerMatchStats)",
          "The Database.Entities.Match is awaiting rating processor data (Generates all Database.Entities.Processor.RatingAdjustments)",
          "The Database.Entities.Match has completed all processing steps"
        ]
      },
      "MatchRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Match is rejected\n\n0 = None (The Database.Entities.Match is not rejected)\n\n1 = NoData (The osu! API returned invalid data or no data for the Database.Entities.Match)\n\n2 = NoGames (The osu! API returned no Database.Entities.Games for the Database.Entities.Match)\n\n4 = InvalidName (The Database.Entities.Match's Database.Entities.Match.Name does not follow tournament lobby title conventions)\n\n8 = FailedTeamVsConversion (The Database.Entities.Match's !:Entities.Games were eligible for Database.Enums.TeamType.TeamVs\r\nconversion and attempting Database.Enums.TeamType.TeamVs conversion was not successful)\n\n16 = NoValidGames (The Database.Entities.Match has no Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified)\n\n32 = UnexpectedGameCount (The Database.Entities.Match's number of Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is not an odd number\r\n(does not satisfy \"best of X\"))\n\n64 = NoEndTime (The Database.Entities.Match's Database.Entities.Match.EndTime could not be determined)\n\n128 = RejectedTournament (The Database.Entities.Tournament the Database.Entities.Match was played in was rejected)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "NoData",
          "NoGames",
          "InvalidName",
          "FailedTeamVsConversion",
          "NoValidGames",
          "UnexpectedGameCount",
          "NoEndTime",
          "RejectedTournament"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Match is not rejected",
          "The osu! API returned invalid data or no data for the Database.Entities.Match",
          "The osu! API returned no Database.Entities.Games for the Database.Entities.Match",
          "The Database.Entities.Match's Database.Entities.Match.Name does not follow tournament lobby title conventions",
          "The Database.Entities.Match's !:Entities.Games were eligible for Database.Enums.TeamType.TeamVs\r\nconversion and attempting Database.Enums.TeamType.TeamVs conversion was not successful",
          "The Database.Entities.Match has no Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified",
          "The Database.Entities.Match's number of Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is not an odd number\r\n(does not satisfy \"best of X\")",
          "The Database.Entities.Match's Database.Entities.Match.EndTime could not be determined",
          "The Database.Entities.Tournament the Database.Entities.Match was played in was rejected"
        ],
        "x-bitwiseFlag": true
      },
      "MatchSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the match",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a match"
      },
      "MatchSubmissionStatusDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Lobby title of the match",
            "nullable": true
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "created": {
            "type": "string",
            "description": "Date that the match was submitted",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Date that the match was last updated",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the status of a submitted match"
      },
      "MatchesQuerySortType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Denotes which property a query for !:Database.Entities.Matches will be sorted by\n\n0 = Id (Sort by primary key)\n\n1 = OsuId (Sort by osu! id)\n\n2 = StartTime (Sort by start start time)\n\n3 = EndTime (Sort by end time)",
        "format": "int32",
        "x-enumNames": [
          "Id",
          "OsuId",
          "StartTime",
          "EndTime"
        ],
        "x-enumDescriptions": [
          "Sort by primary key",
          "Sort by osu! id",
          "Sort by start start time",
          "Sort by end time"
        ]
      },
      "ModStatsDTO": {
        "type": "object",
        "properties": {
          "gamesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "gamesWon": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "normalizedAverageScore": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents some information about a player's mod stats.\r\ne.g. how many times has the player played/won with some mod?"
      },
      "Mods": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          22688,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576,
          1049688,
          2097152,
          4194304,
          8388608,
          16777216,
          33554432,
          67108864,
          134217728,
          268435456,
          521109504,
          522171579,
          536870912,
          1073741824
        ],
        "type": "integer",
        "description": "Represents mod values\n\n0 = None (No mods enabled)\n\n1 = NoFail (No fail (NF))\n\n2 = Easy (Easy (EZ))\n\n4 = TouchDevice (Touch Device (TD))\n\n8 = Hidden (Hidden (HD))\n\n16 = HardRock (Hard Rock (HR))\n\n32 = SuddenDeath (Sudden Death (SD))\n\n64 = DoubleTime (Double Time (DT))\n\n128 = Relax (Relax (RX))\n\n256 = HalfTime (Half Time (HT))\n\n512 = Nightcore (Nightcore (NC) (Only set along with DoubleTime. i.e: NC only gives 576))\n\n1024 = Flashlight (Flashlight (FL))\n\n2048 = Autoplay (Autoplay (AT))\n\n4096 = SpunOut (Spun Out (SO))\n\n8192 = Relax2 (Autopilot (AP) (Autopilot))\n\n16384 = Perfect (Perfect (PF) (Only set along with Database.Enums.Mods.SuddenDeath. i.e: PF only gives 16416))\n\n22688 = InvalidMods (Denotes mods that are ineligible for ratings)\n\n32768 = Key4 (4 key (4K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n65536 = Key5 (5 key (5K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n131072 = Key6 (6 key (6K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n262144 = Key7 (7 key (7K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n524288 = Key8 (8 key (8K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n1048576 = FadeIn (Fade In (FI) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n1049688 = ScoreIncreaseMods (Denotes mods that directly impose a modifier on score)\n\n2097152 = Random (Random (RD) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n4194304 = Cinema (Cinema (CM))\n\n8388608 = Target (Target Practice (TP))\n\n16777216 = Key9 (9 Key (9K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n33554432 = KeyCoop (Co-op (CO) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n67108864 = Key1 (1 Key (1K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n134217728 = Key3 (3 Key (3K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n268435456 = Key2 (2 Key (2K) (Applicable only to Database.Enums.Ruleset.ManiaOther))\n\n521109504 = KeyMod (Denotes mods that are Database.Enums.Ruleset.ManiaOther key modifiers (See https://osu.ppy.sh/wiki/en/Gameplay/Game_modifier/xK))\n\n522171579 = FreeModAllowed (Denotes mods that are available to use during Free Mod settings)\n\n536870912 = ScoreV2 (Score v2 (SV2))\n\n1073741824 = Mirror (Mirror (MR) (Applicable only to Database.Enums.Ruleset.ManiaOther))",
        "format": "int32",
        "x-enumNames": [
          "None",
          "NoFail",
          "Easy",
          "TouchDevice",
          "Hidden",
          "HardRock",
          "SuddenDeath",
          "DoubleTime",
          "Relax",
          "HalfTime",
          "Nightcore",
          "Flashlight",
          "Autoplay",
          "SpunOut",
          "Relax2",
          "Perfect",
          "InvalidMods",
          "Key4",
          "Key5",
          "Key6",
          "Key7",
          "Key8",
          "FadeIn",
          "ScoreIncreaseMods",
          "Random",
          "Cinema",
          "Target",
          "Key9",
          "KeyCoop",
          "Key1",
          "Key3",
          "Key2",
          "KeyMod",
          "FreeModAllowed",
          "ScoreV2",
          "Mirror"
        ],
        "x-enumDescriptions": [
          "No mods enabled",
          "No fail (NF)",
          "Easy (EZ)",
          "Touch Device (TD)",
          "Hidden (HD)",
          "Hard Rock (HR)",
          "Sudden Death (SD)",
          "Double Time (DT)",
          "Relax (RX)",
          "Half Time (HT)",
          "Nightcore (NC) (Only set along with DoubleTime. i.e: NC only gives 576)",
          "Flashlight (FL)",
          "Autoplay (AT)",
          "Spun Out (SO)",
          "Autopilot (AP) (Autopilot)",
          "Perfect (PF) (Only set along with Database.Enums.Mods.SuddenDeath. i.e: PF only gives 16416)",
          "Denotes mods that are ineligible for ratings",
          "4 key (4K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "5 key (5K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "6 key (6K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "7 key (7K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "8 key (8K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "Fade In (FI) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "Denotes mods that directly impose a modifier on score",
          "Random (RD) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "Cinema (CM)",
          "Target Practice (TP)",
          "9 Key (9K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "Co-op (CO) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "1 Key (1K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "3 Key (3K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "2 Key (2K) (Applicable only to Database.Enums.Ruleset.ManiaOther)",
          "Denotes mods that are Database.Enums.Ruleset.ManiaOther key modifiers (See https://osu.ppy.sh/wiki/en/Gameplay/Game_modifier/xK)",
          "Denotes mods that are available to use during Free Mod settings",
          "Score v2 (SV2)",
          "Mirror (MR) (Applicable only to Database.Enums.Ruleset.ManiaOther)"
        ],
        "x-bitwiseFlag": true
      },
      "OAuthClientCreatedDTO": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverrides": {
            "$ref": "#/components/schemas/RateLimitOverrides"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret of the client"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created OAuth client (The only time the client secret is available is when a new client is created)"
      },
      "OAuthClientDTO": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverrides": {
            "$ref": "#/components/schemas/RateLimitOverrides"
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth client"
      },
      "OAuthResponseDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "accessExpiration": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "\n\n0 = Add\n\n1 = Remove\n\n2 = Replace\n\n3 = Move\n\n4 = Copy\n\n5 = Test\n\n6 = Invalid",
        "format": "int32",
        "x-enumNames": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "PlayerCompactDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username"
          },
          "country": {
            "type": "string",
            "description": "osu! country code"
          },
          "rulesetData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOsuRulesetDataDTO"
            },
            "description": "A collection of API.DTOs.PlayerOsuRulesetDataDTO, one for each !:Enums.Ruleset"
          }
        },
        "additionalProperties": false,
        "description": "Represents player information"
      },
      "PlayerFilteringResultDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player, if found",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The username of the player, if found",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "The osu! id of the player",
            "format": "int64"
          },
          "filteringResult": {
            "$ref": "#/components/schemas/FilteringResult"
          },
          "filteringFailReason": {
            "$ref": "#/components/schemas/FilteringFailReason"
          },
          "filteringResultMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerFilteringResultDTO.FilteringResult in string form",
            "nullable": true,
            "readOnly": true
          },
          "filteringFailReasonMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerFilteringResultDTO.FilteringFailReason in string form",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one player's filtering result"
      },
      "PlayerFrequencyDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the teammate or opponent",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the teammate or opponent",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username of the teammate or opponent",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "description": "Number of times this teammate or opponent has played with the player",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a player in the context of a teammate or opponent of another player"
      },
      "PlayerModStatsDTO": {
        "type": "object",
        "properties": {
          "playedNM": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedEZ": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHD": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHR": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedDT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedFL": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDHR": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDDT": {
            "$ref": "#/components/schemas/ModStatsDTO"
          },
          "playedHDEZ": {
            "$ref": "#/components/schemas/ModStatsDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in games of differing mod combinations"
      },
      "PlayerOsuRulesetDataDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "pp": {
            "type": "number",
            "description": "Performance points",
            "format": "double"
          },
          "globalRank": {
            "type": "integer",
            "description": "Last recorded global rank",
            "format": "int32"
          },
          "earliestGlobalRank": {
            "type": "integer",
            "description": "Global rank approximately at the time of the Database.Entities.Player's first appearance in a Database.Entities.Match",
            "format": "int32",
            "nullable": true
          },
          "earliestGlobalRankDate": {
            "type": "string",
            "description": "Timestamp for when the API.DTOs.PlayerOsuRulesetDataDTO.EarliestGlobalRank was recorded",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data for a Database.Entities.Player in a API.DTOs.PlayerOsuRulesetDataDTO.Ruleset obtained from the osu! API and/or osu!Track API"
      },
      "PlayerRatingChartDTO": {
        "type": "object",
        "properties": {
          "chartData": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlayerRatingChartDataPointDTO"
              }
            },
            "description": "List of data points used to construct the chart"
          }
        },
        "additionalProperties": false,
        "description": "Represents data used to construct a rating delta chart for a player"
      },
      "PlayerRatingChartDataPointDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Match name"
          },
          "matchId": {
            "type": "integer",
            "description": "Match id",
            "format": "int32",
            "nullable": true
          },
          "matchOsuId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64",
            "nullable": true
          },
          "matchCost": {
            "type": "number",
            "description": "Match cost of the player",
            "format": "double",
            "nullable": true
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating of the player before this match occurred",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating of the player after this match occurred",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Volatility of the player before this match occurred",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Volatility of the player after this match occurred",
            "format": "double"
          },
          "ratingChange": {
            "type": "number",
            "description": "Difference in rating for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "volatilityChange": {
            "type": "number",
            "description": "Difference in volatility for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "isAdjustment": {
            "type": "boolean",
            "description": "Indicates whether this data point is from a rating change that occurred outside of a match (i.e. decay)"
          },
          "timestamp": {
            "type": "string",
            "description": "Match start time",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data point used to construct a rating chart for a player"
      },
      "PlayerRatingStatsDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "rating": {
            "type": "number",
            "description": "Rating",
            "format": "double"
          },
          "volatility": {
            "type": "number",
            "description": "Rating volatility",
            "format": "double"
          },
          "percentile": {
            "type": "number",
            "description": "Global rating percentile",
            "format": "double"
          },
          "globalRank": {
            "type": "integer",
            "description": "Global rank",
            "format": "int32"
          },
          "countryRank": {
            "type": "integer",
            "description": "Country rank",
            "format": "int32"
          },
          "playerId": {
            "type": "integer",
            "description": "Player id",
            "format": "int32"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingAdjustmentDTO"
            },
            "description": "A collection of adjustments that describe the changes resulting in the final rating"
          },
          "tournamentsPlayed": {
            "type": "integer",
            "description": "Total number of tournaments played",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "Total number of matches played",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "description": "Match win rate",
            "format": "double"
          },
          "rankProgress": {
            "$ref": "#/components/schemas/RankProgressDTO"
          },
          "isProvisional": {
            "type": "boolean",
            "description": "Denotes the current rating as being provisional"
          }
        },
        "additionalProperties": false,
        "description": "Describes tournament rating based information for a player in a ruleset with additional statistics"
      },
      "PlayerSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the player",
            "format": "int64"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the player for the given ruleset",
            "format": "double",
            "nullable": true
          },
          "globalRank": {
            "type": "integer",
            "description": "Current global rank of the player for the given ruleset",
            "format": "int32",
            "nullable": true
          },
          "ratingTier": {
            "type": "string",
            "description": "Current rating tier of the player for the given ruleset",
            "nullable": true,
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the player",
            "nullable": true
          },
          "thumbnail": {
            "type": "string",
            "description": "Link to an osu! thumbnail for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a player for a given ruleset"
      },
      "PlayerStatsDTO": {
        "type": "object",
        "properties": {
          "playerInfo": {
            "$ref": "#/components/schemas/PlayerCompactDTO"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "rating": {
            "$ref": "#/components/schemas/PlayerRatingStatsDTO"
          },
          "matchStats": {
            "$ref": "#/components/schemas/AggregatePlayerMatchStatsDTO"
          },
          "modStats": {
            "$ref": "#/components/schemas/PlayerModStatsDTO"
          },
          "tournamentStats": {
            "$ref": "#/components/schemas/PlayerTournamentStatsDTO"
          },
          "frequentTeammates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's teammates",
            "nullable": true
          },
          "frequentOpponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's opponents",
            "nullable": true
          },
          "ratingChart": {
            "$ref": "#/components/schemas/PlayerRatingChartDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of statistics for a player in a ruleset"
      },
      "PlayerTournamentLobbySizeCountDTO": {
        "type": "object",
        "properties": {
          "count1v1": {
            "type": "integer",
            "description": "Number of 1v1 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count2v2": {
            "type": "integer",
            "description": "Number of 2v2 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count3v3": {
            "type": "integer",
            "description": "Number of 3v3 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count4v4": {
            "type": "integer",
            "description": "Number of 4v4 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "countOther": {
            "type": "integer",
            "description": "Number of tournaments played outside of standard team sizes",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in tournaments of differing team sizes"
      },
      "PlayerTournamentMatchCostDTO": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "tournamentId": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "tournamentName": {
            "type": "string",
            "description": "Name of the tournament"
          },
          "tournamentAcronym": {
            "type": "string",
            "description": "Abbreviated name of the tournament"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "matchCost": {
            "type": "number",
            "description": "Average match cost across the tournament for the player",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents match cost data across an entire tournament for a player"
      },
      "PlayerTournamentStatsDTO": {
        "type": "object",
        "properties": {
          "lobbySizeCounts": {
            "$ref": "#/components/schemas/PlayerTournamentLobbySizeCountDTO"
          },
          "bestPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of best tournament performances for the player"
          },
          "recentPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of recent tournament performances for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics for a player regarding tournament participation and performance"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RankProgressDTO": {
        "type": "object",
        "properties": {
          "currentTier": {
            "type": "string",
            "description": "Current tier"
          },
          "currentSubTier": {
            "type": "integer",
            "description": "Current sub tier",
            "format": "int32",
            "nullable": true
          },
          "ratingForNextTier": {
            "type": "number",
            "description": "Rating required to reach next sub tier",
            "format": "double"
          },
          "ratingForNextMajorTier": {
            "type": "number",
            "description": "Rating required to reach next major tier",
            "format": "double"
          },
          "nextMajorTier": {
            "type": "string",
            "description": "Next major tier following current tier",
            "nullable": true
          },
          "subTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next sub tier as a percentage",
            "format": "double",
            "nullable": true
          },
          "majorTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next major tier as a percentage",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents rating tier progress data"
      },
      "RateLimitOverrides": {
        "type": "object",
        "properties": {
          "permitLimit": {
            "type": "integer",
            "description": "The number of requests granted per window",
            "format": "int32",
            "nullable": true
          },
          "window": {
            "type": "integer",
            "description": "The length of the window in seconds",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents values used to override the default rate limit configuration"
      },
      "RatingAdjustmentDTO": {
        "type": "object",
        "properties": {
          "adjustmentType": {
            "$ref": "#/components/schemas/RatingAdjustmentType"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of when the adjustment was applied",
            "format": "date-time"
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating before the adjustment",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating after the adjustment",
            "format": "double"
          },
          "ratingDelta": {
            "type": "number",
            "description": "Total change in rating",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Rating volatility before the adjustment",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Rating volatility after the adjustment",
            "format": "double"
          },
          "volatilityDelta": {
            "type": "number",
            "description": "Total change in rating volatility",
            "format": "double"
          },
          "matchId": {
            "type": "integer",
            "description": "Id of the match the adjustment was created for if available",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a single change to a PlayerRating"
      },
      "RatingAdjustmentType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Represents the different types of events that result in the generation of a Database.Entities.Processor.RatingAdjustment\n\n0 = Initial (The Database.Entities.Processor.RatingAdjustment is the initial rating)\n\n1 = Decay (The Database.Entities.Processor.RatingAdjustment is the result of a period of inactivity (decay))\n\n2 = Match (The Database.Entities.Processor.RatingAdjustment is the result of participation in a Database.Entities.Match)",
        "format": "int32",
        "x-enumNames": [
          "Initial",
          "Decay",
          "Match"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Processor.RatingAdjustment is the initial rating",
          "The Database.Entities.Processor.RatingAdjustment is the result of a period of inactivity (decay)",
          "The Database.Entities.Processor.RatingAdjustment is the result of participation in a Database.Entities.Match"
        ]
      },
      "Ruleset": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "Represents osu! play modes\n\n0 = Osu (osu! (standard))\n\n1 = Taiko (osu! Taiko)\n\n2 = Catch (osu! Catch (aka Fruits))\n\n3 = ManiaOther (osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k))\n\n4 = Mania4k (osu! Mania 4k variant)\n\n5 = Mania7k (osu! Mania 7k variant)",
        "format": "int32",
        "x-enumNames": [
          "Osu",
          "Taiko",
          "Catch",
          "ManiaOther",
          "Mania4k",
          "Mania7k"
        ],
        "x-enumDescriptions": [
          "osu! (standard)",
          "osu! Taiko",
          "osu! Catch (aka Fruits)",
          "osu! Mania (Encompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k)",
          "osu! Mania 4k variant",
          "osu! Mania 7k variant"
        ]
      },
      "ScoreProcessingStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.GameScore in the processing flow\n\n0 = NeedsAutomationChecks (The Database.Entities.GameScore needs automation checks)\n\n1 = NeedsVerification (The Database.Entities.GameScore is awaiting verification from a\r\nDatabase.Entities.User with verifier permission)\n\n2 = Done (The Database.Entities.GameScore has completed all processing steps)",
        "format": "int32",
        "x-enumNames": [
          "NeedsAutomationChecks",
          "NeedsVerification",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.GameScore needs automation checks",
          "The Database.Entities.GameScore is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.GameScore has completed all processing steps"
        ]
      },
      "ScoreRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.GameScore is rejected\n\n0 = None (The Database.Entities.GameScore is not rejected)\n\n1 = ScoreBelowMinimum (The Database.Entities.GameScore's Database.Entities.GameScore.Score is below the minimum threshold)\n\n2 = InvalidMods (The Database.Entities.GameScore was set with any Database.Enums.Mods.InvalidMods)\n\n4 = RulesetMismatch (The Database.Entities.GameScore's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament)\n\n8 = RejectedGame (The Database.Entities.Game the Database.Entities.GameScore was set in was rejected)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "ScoreBelowMinimum",
          "InvalidMods",
          "RulesetMismatch",
          "RejectedGame"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.GameScore is not rejected",
          "The Database.Entities.GameScore's Database.Entities.GameScore.Score is below the minimum threshold",
          "The Database.Entities.GameScore was set with any Database.Enums.Mods.InvalidMods",
          "The Database.Entities.GameScore's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament",
          "The Database.Entities.Game the Database.Entities.GameScore was set in was rejected"
        ],
        "x-bitwiseFlag": true
      },
      "ScoringType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the scoring method (win condition) for a Database.Entities.Game\n\n0 = Score (Scoring based on Score v1)\n\n1 = Accuracy (Scoring based on accuracy)\n\n2 = Combo (Scoring based on combo)\n\n3 = ScoreV2 (Scoring based on Score v2)",
        "format": "int32",
        "x-enumNames": [
          "Score",
          "Accuracy",
          "Combo",
          "ScoreV2"
        ],
        "x-enumDescriptions": [
          "Scoring based on Score v1",
          "Scoring based on accuracy",
          "Scoring based on combo",
          "Scoring based on Score v2"
        ]
      },
      "SearchResponseCollectionDTO": {
        "type": "object",
        "properties": {
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentSearchResultDTO"
            },
            "description": "A collection of search results for tournaments matching the search query"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchSearchResultDTO"
            },
            "description": "A collection of search results for matches matching the search query"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSearchResultDTO"
            },
            "description": "A collection of search results for players matching the search query"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of search results"
      },
      "Team": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Represents the team a Database.Entities.Player was on when a Database.Entities.GameScore was set\n\n0 = NoTeam (No team)\n\n1 = Blue (Team blue)\n\n2 = Red (Team red)",
        "format": "int32",
        "x-enumNames": [
          "NoTeam",
          "Blue",
          "Red"
        ],
        "x-enumDescriptions": [
          "No team",
          "Team blue",
          "Team red"
        ]
      },
      "TeamType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the team type used for a Database.Entities.Game (See <a href=\"https://osu.ppy.sh/wiki/en/Client/Interface/Multiplayer\"> osu! wiki - Multiplayer</a>)\n\n0 = HeadToHead (Free for all)\n\n1 = TagCoop (Free for all (Tag format) (All players play tag on the same beatmap))\n\n2 = TeamVs (Team red vs team blue)\n\n3 = TagTeamVs (Team red vs team blue (Tag format))",
        "format": "int32",
        "x-enumNames": [
          "HeadToHead",
          "TagCoop",
          "TeamVs",
          "TagTeamVs"
        ],
        "x-enumDescriptions": [
          "Free for all",
          "Free for all (Tag format) (All players play tag on the same beatmap)",
          "Team red vs team blue",
          "Team red vs team blue (Tag format)"
        ]
      },
      "TournamentCreatedResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "URL of where the new resource can be accessed"
          },
          "createdAtRouteValues": {
            "$ref": "#/components/schemas/CreatedAtRouteValues"
          },
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchCreatedResultDTO"
            },
            "description": "List of created matches"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created tournament"
      },
      "TournamentDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "forumUrl": {
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "processingStatus": {
            "$ref": "#/components/schemas/TournamentProcessingStatus"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/TournamentRejectionReason"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "lobbySize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of submission for the tournament",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "description": "The start date of the first match played in the tournament",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end date of the last match played in the tournament",
            "format": "date-time"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDTO"
            },
            "description": "All associated match data (Will be empty for bulk requests such as List)"
          }
        },
        "additionalProperties": false,
        "description": "Represents a tournament"
      },
      "TournamentProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Tournament in the processing flow\n\n0 = NeedsApproval (The Database.Entities.Tournament is awaiting approval from a\r\nDatabase.Entities.User with verifier permission (Functions as the entry point to the processing flow. No entities owned by a Database.Entities.Tournament\r\nwill advance through the processing flow until approved.))\n\n1 = NeedsMatchData (The Database.Entities.Tournament has Database.Entities.Matches with a\r\nDatabase.Enums.Verification.MatchProcessingStatus of Database.Enums.Verification.MatchProcessingStatus.NeedsData)\n\n2 = NeedsAutomationChecks (The Database.Entities.Tournament needs automation checks)\n\n3 = NeedsVerification (The Database.Entities.Tournament is awaiting verification from a\r\nDatabase.Entities.User with verifier permission)\n\n4 = NeedsStatCalculation (The Database.Entities.Tournament needs stat calculation)\n\n5 = Done (The tournament has completed all processing steps)",
        "format": "int32",
        "x-enumNames": [
          "NeedsApproval",
          "NeedsMatchData",
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Tournament is awaiting approval from a\r\nDatabase.Entities.User with verifier permission (Functions as the entry point to the processing flow. No entities owned by a Database.Entities.Tournament\r\nwill advance through the processing flow until approved.)",
          "The Database.Entities.Tournament has Database.Entities.Matches with a\r\nDatabase.Enums.Verification.MatchProcessingStatus of Database.Enums.Verification.MatchProcessingStatus.NeedsData",
          "The Database.Entities.Tournament needs automation checks",
          "The Database.Entities.Tournament is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Tournament needs stat calculation",
          "The tournament has completed all processing steps"
        ]
      },
      "TournamentRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Tournament is rejected\n\n0 = None (The Database.Entities.Tournament is not rejected)\n\n1 = NoVerifiedMatches (The Database.Entities.Tournament has no Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified)\n\n2 = NotEnoughVerifiedMatches (The Database.Entities.Tournament's number of Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or\r\nDatabase.Enums.Verification.VerificationStatus.PreVerified is below 80% of the total)\n\n4 = AbnormalWinCondition (The Database.Entities.Tournament's win condition is not Database.Enums.ScoringType.ScoreV2 (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as gimmicky win conditions, mixed win conditions, etc))\n\n8 = AbnormalFormat (The Database.Entities.Tournament's format is not suitable for ratings (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as excessive gimmicks, relax, multiple modes, etc))\n\n16 = VaryingLobbySize (The Database.Entities.Tournament's lobby sizes are not consistent. (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as > 2 teams in lobby at once, async lobbies, team size gimmicks, varying team sizes, etc))\n\n32 = IncompleteData (The Database.Entities.Tournament's data is incomplete or not recoverable\r\nCovers cases where match links are lost to time, private,\r\nmain sheet is deleted, missing rounds, etc. (Only assigned via a \"rejected submission\". <br />\r\nCovers cases where match links are lost to time / dead / private, main sheet is deleted, missing rounds, etc))",
        "format": "int32",
        "x-enumNames": [
          "None",
          "NoVerifiedMatches",
          "NotEnoughVerifiedMatches",
          "AbnormalWinCondition",
          "AbnormalFormat",
          "VaryingLobbySize",
          "IncompleteData"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Tournament is not rejected",
          "The Database.Entities.Tournament has no Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified",
          "The Database.Entities.Tournament's number of Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or\r\nDatabase.Enums.Verification.VerificationStatus.PreVerified is below 80% of the total",
          "The Database.Entities.Tournament's win condition is not Database.Enums.ScoringType.ScoreV2 (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as gimmicky win conditions, mixed win conditions, etc)",
          "The Database.Entities.Tournament's format is not suitable for ratings (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as excessive gimmicks, relax, multiple modes, etc)",
          "The Database.Entities.Tournament's lobby sizes are not consistent. (Only assigned via a \"rejected submission\". <br />\r\nCovers cases such as > 2 teams in lobby at once, async lobbies, team size gimmicks, varying team sizes, etc)",
          "The Database.Entities.Tournament's data is incomplete or not recoverable\r\nCovers cases where match links are lost to time, private,\r\nmain sheet is deleted, missing rounds, etc. (Only assigned via a \"rejected submission\". <br />\r\nCovers cases where match links are lost to time / dead / private, main sheet is deleted, missing rounds, etc)"
        ],
        "x-bitwiseFlag": true
      },
      "TournamentSearchResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "lobbySize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a tournament"
      },
      "TournamentSubmissionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "forumUrl": {
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "lobbySize": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of osu! match ids"
          }
        },
        "additionalProperties": false,
        "description": "An incoming tournament submission"
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the user",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the user",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Id of the associated player",
            "format": "int32",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the associated player",
            "format": "int64",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "osu! country country code of the associated player",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the associated player",
            "nullable": true
          },
          "settings": {
            "$ref": "#/components/schemas/UserSettingsDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents user account information"
      },
      "UserSettingsDTO": {
        "type": "object",
        "properties": {
          "ruleset": {
            "$ref": "#/components/schemas/Ruleset"
          },
          "rulesetIsControlled": {
            "type": "boolean",
            "description": "Denotes whether the associated user has overwritten their default ruleset (If false, the default ruleset is always the same as the user's default ruleset on the osu! website)"
          }
        },
        "additionalProperties": false,
        "description": "Represents user controlled settings for otr-web"
      },
      "VerificationStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore\n\n0 = None (Verification status has not yet been assigned)\n\n1 = PreRejected (The Data Worker has identified an issue during processing)\n\n2 = PreVerified (The Data Worker has not identified any issues during processing)\n\n3 = Rejected (Determined to be unfit for ratings by manual review)\n\n4 = Verified (Determined to be fit for ratings by manual review)",
        "format": "int32",
        "x-enumNames": [
          "None",
          "PreRejected",
          "PreVerified",
          "Rejected",
          "Verified"
        ],
        "x-enumDescriptions": [
          "Verification status has not yet been assigned",
          "The Data Worker has identified an issue during processing",
          "The Data Worker has not identified any issues during processing",
          "Determined to be unfit for ratings by manual review",
          "Determined to be fit for ratings by manual review"
        ]
      }
    }
  }
}