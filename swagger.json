{
  "openapi": "3.0.1",
  "info": {
    "title": "osu! Tournament Rating API",
    "description": "The official resource for reading and writing data within the osu! Tournament Rating platform.",
    "version": "v1"
  },
  "paths": {
    "/api/v1/beatmaps": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "List all beatmaps",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Beatmaps_list",
        "responses": {
          "200": {
            "description": "Returns all beatmaps",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/beatmaps/{key}": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "Get a beatmap",
        "description": "Get a beatmap searching first by id, then by osu! id\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Beatmaps_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key (id or osu! id)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A beatmap matching the given key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a beatmap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/clients/{id}/ratelimit": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Set the rate limit for a client",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Clients_patchRateLimit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new rate limit for the client",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A client matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated client",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/diagnostics/ping": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "operationId": "Diagnostics_ping",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/filtering": {
      "post": {
        "tags": [
          "Filtering"
        ],
        "summary": "Filter a list of users based on the criteria as described in\r\nAPI.DTOs.FilteringResultDTO",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Filtering_filter",
        "requestBody": {
          "description": "The filtering request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request body is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The filtering result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/games/{id}/notes": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Create an admin note for a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_createAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "List all admin notes from a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Games_listAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes from a game",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/games/{id}/notes/{noteId}": {
      "patch": {
        "tags": [
          "Games"
        ],
        "summary": "Update an admin note for a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_updateAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Delete an admin note for a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_deleteAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/games/{id}": {
      "patch": {
        "tags": [
          "Games"
        ],
        "summary": "Amend game data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated game",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Delete a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The game was deleted successfully"
          },
          "404": {
            "description": "A game matching the given id does not exist"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/gamescores/{id}/notes": {
      "post": {
        "tags": [
          "GameScores"
        ],
        "summary": "Create an admin note for a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_createAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "GameScores"
        ],
        "summary": "List all admin notes for a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "GameScores_listAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes from a score",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/gamescores/{id}/notes/{noteId}": {
      "patch": {
        "tags": [
          "GameScores"
        ],
        "summary": "Update an admin note for a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_updateAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "GameScores"
        ],
        "summary": "Delete an admin note for a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_deleteAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/gamescores/{id}": {
      "patch": {
        "tags": [
          "GameScores"
        ],
        "summary": "Amend score data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated score",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "GameScores"
        ],
        "summary": "Delete a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "The score was deleted successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Get a leaderboard of players which fit an optional request query",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Leaderboards_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "maximum": 100,
              "minimum": 10,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset for leaderboard data",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ],
              "default": 0
            }
          },
          {
            "name": "chartType",
            "in": "query",
            "description": "Defines whether the leaderboard should be global or filtered by country",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LeaderboardChartType"
                }
              ],
              "default": 0
            }
          },
          {
            "name": "minRank",
            "in": "query",
            "description": "Rank floor (The \"better\" inclusive rank bound.\r\nIf given, only players with a rank greater than or equal to this value will be included)",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxRank",
            "in": "query",
            "description": "Rank ceiling (The \"worse\" inclusive rank bound.\r\nIf given, only players with a rank less than or equal to this value will be included)",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minRating",
            "in": "query",
            "description": "Rating floor (The \"worse\" inclusive rating bound.\r\nIf given, only players with a rating greater than or equal to this value will be included)",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxRating",
            "in": "query",
            "description": "Rating ceiling (The \"better\" inclusive rating bound.\r\nIf given, only players with a rating less than or equal to this value will be included)",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minMatches",
            "in": "query",
            "description": "Minimum number of matches played",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxMatches",
            "in": "query",
            "description": "Maximum number of matches played",
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minWinRate",
            "in": "query",
            "description": "Minimum win rate",
            "style": "form",
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maxWinRate",
            "in": "query",
            "description": "Maximum win rate",
            "style": "form",
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "bronze",
            "in": "query",
            "description": "Explicitly include bronze players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "silver",
            "in": "query",
            "description": "Explicitly include silver players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gold",
            "in": "query",
            "description": "Explicitly include gold players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "platinum",
            "in": "query",
            "description": "Explicitly include platinum players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "emerald",
            "in": "query",
            "description": "Explicitly include emerald players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "diamond",
            "in": "query",
            "description": "Explicitly include emerald players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "master",
            "in": "query",
            "description": "Explicitly include master players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "grandmaster",
            "in": "query",
            "description": "Explicitly include grandmaster players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eliteGrandmaster",
            "in": "query",
            "description": "Explicitly include elite grandmaster players",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the leaderboard",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}/notes": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Create an admin note for a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_createAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "List all admin notes from a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Matches_listAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes from a match",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}/notes/{noteId}": {
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Update an admin note for a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_updateAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Matches"
        ],
        "summary": "Delete an admin note for a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_deleteAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get all matches which fit an optional request query",
        "description": "Will not include game data\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Matches_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Filters results for only matches played in a specified ruleset",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results for only matches with a partially matching name (case insensitive)",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filters results for only matches that occurred on or after a specified date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filters results for only matches that occurred on or before a specified date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filters results for only matches with a specified verification status",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationStatus"
                }
              ]
            }
          },
          {
            "name": "rejectionReason",
            "in": "query",
            "description": "Filters results for only matches with a specified rejection reason",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchRejectionReason"
                }
              ]
            }
          },
          {
            "name": "processingStatus",
            "in": "query",
            "description": "Filters results for only matches with a specified processing status",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchProcessingStatus"
                }
              ]
            }
          },
          {
            "name": "submittedBy",
            "in": "query",
            "description": "Filters results for only matches submitted by a user with a specified id",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verifiedBy",
            "in": "query",
            "description": "Filters results for only matches verified by a user with a specified id",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key used to sort results by",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchQuerySortType"
                }
              ],
              "default": 2
            }
          },
          {
            "name": "descending",
            "in": "query",
            "description": "Whether the results are sorted in descending order by the API.DTOs.MatchRequestQueryDTO.Sort",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all matches which fit the request query",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Matches_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Amend match data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Matches"
        ],
        "summary": "Delete a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "The match was deleted successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the currently logged in user",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_get",
        "responses": {
          "302": {
            "description": "Redirects to `GET` `/users/{id}`"
          },
          "200": {
            "description": "Returns the currently logged in user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/stats": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get player stats for the currently logged in user",
        "description": "If no ruleset is provided, the player's default is used. Database.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_getStats",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to `GET` `/players/{key}/stats`"
          },
          "200": {
            "description": "Returns the currently logged in user's player stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/settings/ruleset": {
      "patch": {
        "tags": [
          "Me"
        ],
        "summary": "Update the ruleset for the currently logged in user",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_updateRuleset",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "308": {
            "description": "Redirects to `PATCH` `/users/{id}/settings/ruleset`"
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Sync the ruleset of the currently logged in user to their osu! ruleset",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_syncRuleset",
        "responses": {
          "308": {
            "description": "Redirect"
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset:sync`"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/oauth/authorize": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using an osu! authorization code",
        "operationId": "OAuth_authorize",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "osu! authorization code",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "There was an error during authorization",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns user access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              }
            }
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/oauth/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Authorize using client credentials",
        "operationId": "OAuth_authorizeClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "Client id",
            "required": true,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientSecret",
            "in": "query",
            "description": "Client secret",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "There was an error during authorization",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns client access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              }
            }
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/oauth/client": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Create a new OAuth client",
        "description": "Client secret is only returned from creation.\r\nThe user will have to reset the secret if they lose access.\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "OAuth_createClient",
        "responses": {
          "200": {
            "description": "Returns created client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/oauth/refresh": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Generate new access credentials from a valid refresh token",
        "description": "Generated access credentials will contain only a new access token",
        "operationId": "OAuth_refresh",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "Refresh token",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "The refresh token is invalid or there was an error during authorization",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns access credentials containing a new access token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              }
            }
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/players/{id}/notes": {
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Create an admin note for a player",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Players_createAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Player id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A player matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "List all admin notes for a player",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Players_listAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Player id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes from a player",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{id}/notes/{noteId}": {
      "patch": {
        "tags": [
          "Players"
        ],
        "summary": "Update an admin note for a player",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Players_updateAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Player id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "If a player matching the given id does not exist.\r\nIf an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Players"
        ],
        "summary": "Delete an admin note for a player",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Players_deleteAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Player id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a player",
        "description": "Get a player searching first by id, then by osu! id, then osu! username\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Players_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key (id, osu! id, or osu! username)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}/stats": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a player's stats",
        "description": "Gets player by versatile search.\r\nIf no ruleset is provided, the player's default is used. Database.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Players_getStats",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given search key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player's stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerStatsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for tournaments, matches, and users",
        "description": "Search uses partial matching on: tournament name and abbreviation, match name, and player name\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Search_search",
        "parameters": [
          {
            "name": "searchKey",
            "in": "query",
            "description": "Search key",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tournaments, matches, and usernames matching the given search key",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}:accept-pre-verification-statuses": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Mark pre-rejected items as rejected, marks pre-verified\r\nitems as verified. Applies for the tournament and all children.",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_acceptPreVerificationStatuses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All items were updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}:reset-automation-statuses": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Rerun automation checks for a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_rerunAutomationChecks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to overwrite data which has already been Verified or Rejected",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The entities were updated successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/notes": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Create an admin note for a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_createAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "If the authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all admin notes from a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Tournaments_listAdminNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes from a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/notes/{noteId}": {
      "patch": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Update an admin note for a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_updateAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Delete an admin note for a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_deleteAdminNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist\r\nor an admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/beatmaps": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Add beatmaps to a tournament by osu! id",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_insertBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A collection of osu! beatmap ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The beatmaps were added successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Delete all pooled beatmaps from a tournament. This does not alter the beatmaps table. This only\r\ndeletes the mapping between a tournament and a pooled beatmap.",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_deleteBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An optional collection of specific beatmap ids to remove from the pooled beatmaps collection",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "All beatmaps were successfully removed"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get all beatmaps pooled by a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Tournaments_getBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of pooled beatmaps"
          },
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get all tournaments which fit an optional request query",
        "description": "Results will not include match data",
        "operationId": "Tournaments_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "Filters results for only tournaments that are verified",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Filters results for only tournaments played in a specified ruleset",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results for only tournaments with a partially matching name or abbreviation (case insensitive)",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filters results for only tournaments that occurred on or after a specified date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filters results for only tournaments that occurred on or before a specified date",
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filters results for only matches with a specified verification status",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationStatus"
                }
              ]
            }
          },
          {
            "name": "rejectionReason",
            "in": "query",
            "description": "Filters results for only tournaments with a specified rejection reason",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TournamentRejectionReason"
                }
              ]
            }
          },
          {
            "name": "processingStatus",
            "in": "query",
            "description": "Filters results for only tournaments with a specified processing status",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TournamentProcessingStatus"
                }
              ]
            }
          },
          {
            "name": "submittedBy",
            "in": "query",
            "description": "Filters results for only tournaments submitted by a user with a specified id",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verifiedBy",
            "in": "query",
            "description": "Filters results for only tournaments verified by a user with a specified id",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key used to sort results by",
            "style": "form",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TournamentQuerySortType"
                }
              ],
              "default": 1
            }
          },
          {
            "name": "descending",
            "in": "query",
            "description": "Whether the results are sorted in descending order by the API.DTOs.TournamentRequestQueryDTO.Sort",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all tournaments which fit the request query",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              }
            }
          }
        },
        "x-requiresAuthorization": false
      },
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Submit a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Tournaments_create",
        "requestBody": {
          "description": "Tournament submission data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The tournament submission is malformed or\r\na tournament matching the given name and ruleset already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Returns location information for the created tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Tournaments_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "If true, specifically includes verified match data. If false,\r\nincludes all data, regardless of verification status.\r\nAlso includes all child navigations if false.\r\nDefault true (strictly verified data with limited navigation properties)",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Amend tournament data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Delete a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tournament was deleted successfully"
          },
          "404": {
            "description": "A tournament matching the given id does not exist"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/matches": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all matches from a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Tournaments_listMatches",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all matches from a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/scopes": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's scopes",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Users_updateScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of scopes to assign to the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "A given scope is invalid, or the update was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/submissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's match submissions",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_getSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of submissions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/submissions:reject": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reject a user's match submissions",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Users_rejectSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          },
          "400": {
            "description": "The operation was not successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's OAuth clients",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_getClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of OAuth clients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients/{clientId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's OAuth client",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_deleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "OAuth client id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist\r\nor an OAuth client matching the given id is not owned by the user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The deletion was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The deletion was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients/{clientId}/secret:reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the secret of a user's OAuth client",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_resetClientSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "OAuth client id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist\r\nor an OAuth client matching the given id is not owned by the user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns new client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/settings/ruleset": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update the ruleset of a user",
        "description": "If a user's preferred ruleset was previously being synced with the one selected on their osu! profile,\r\nupdating it will stop their preferred ruleset from being synced in the future unless it is requested\r\nto be synced again\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_updateRuleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new ruleset",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ],
                "description": "Represents osu! play modes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sync the ruleset of a user with their osu! ruleset",
        "description": "Sets the user's preferred ruleset to the one currently selected on their osu! profile\r\nand in the future will continuously update if the ruleset selected on their osu! profile changes\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_syncRuleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    }
  },
  "components": {
    "schemas": {
      "AccessCredentialsDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "nullable": true
          },
          "accessExpiration": {
            "type": "integer",
            "description": "Lifetime of the access token in seconds",
            "format": "int32",
            "nullable": true
          },
          "refreshExpiration": {
            "type": "integer",
            "description": "Lifetime of the refresh token in seconds",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents access credentials and their expiry"
      },
      "AdminNoteDTO": {
        "required": [
          "adminUser",
          "created",
          "id",
          "note",
          "referenceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the admin note",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "Timestamp of creation",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Timestamp of the last update, if available",
            "format": "date-time",
            "nullable": true
          },
          "referenceId": {
            "type": "integer",
            "description": "Id of the parent entity",
            "format": "int32"
          },
          "adminUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The admin user that created the note"
          },
          "note": {
            "type": "string",
            "description": "Content of the note"
          }
        },
        "additionalProperties": false,
        "description": "Represents a note for an entity created by an admin"
      },
      "AggregatePlayerMatchStatsDTO": {
        "required": [
          "averageGamesPlayedAggregate",
          "averageMatchCostAggregate",
          "averagePlacingAggregate",
          "bestWinStreak",
          "gamesLost",
          "gamesPlayed",
          "gamesWon",
          "gameWinRate",
          "highestRating",
          "matchAverageAccuracyAggregate",
          "matchAverageMissesAggregate",
          "matchAverageScoreAggregate",
          "matchesLost",
          "matchesPlayed",
          "matchesWon",
          "matchWinRate",
          "periodEnd",
          "periodStart",
          "ratingGained"
        ],
        "type": "object",
        "properties": {
          "averageMatchCostAggregate": {
            "type": "number",
            "description": "The player's average match cost during the period",
            "format": "double"
          },
          "highestRating": {
            "type": "number",
            "description": "The peak rating achieved by the player during the period",
            "format": "double"
          },
          "ratingGained": {
            "type": "number",
            "description": "The amount of rating gained from the start of the period to the end of the period",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The amount of games won during the period",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The amount of games lost during the period",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The amount of games played during the period",
            "format": "int32"
          },
          "matchesWon": {
            "type": "integer",
            "description": "The amount of matches won during the period",
            "format": "int32"
          },
          "matchesLost": {
            "type": "integer",
            "description": "The amount of matches lost during the period",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "The amount of matches played during the period",
            "format": "int32",
            "readOnly": true
          },
          "gameWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's game win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "matchWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's match win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "averageTeammateRating": {
            "type": "number",
            "description": "The average rating of the player's teammates during the period. This average does not include the player's own rating",
            "format": "double",
            "nullable": true
          },
          "averageOpponentRating": {
            "type": "number",
            "description": "The average rating of the player's opponents during the period",
            "format": "double",
            "nullable": true
          },
          "bestWinStreak": {
            "type": "integer",
            "description": "The most amount of matches won in a row during the period",
            "format": "int32"
          },
          "matchAverageScoreAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average score across the entire lobby. This average includes\r\nscores for games the player may have not been in for",
            "format": "double"
          },
          "matchAverageMissesAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average miss count of the lobby, across all games in that match",
            "format": "double"
          },
          "matchAverageAccuracyAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average accuracy of the lobby, across all games in that match",
            "format": "double"
          },
          "averageGamesPlayedAggregate": {
            "type": "number",
            "description": "The amount of maps the player participates in, on average.",
            "format": "double"
          },
          "averagePlacingAggregate": {
            "type": "number",
            "description": "The average lobby ranking the player has on maps they participate in.\r\nA top-score is 1, bottom score would be team size * 2",
            "format": "double"
          },
          "periodStart": {
            "type": "string",
            "description": "The beginning of the period for which the statistics are calculated.",
            "format": "date-time"
          },
          "periodEnd": {
            "type": "string",
            "description": "The end of the period for which the statistics are calculated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Represents an aggregate of match statistics for a player during a period of time"
      },
      "AuthorizationPolicies": {
        "enum": [
          "AccessUserResources"
        ],
        "type": "string",
        "description": "The possible authorization policies enforced on a route. Authorization policies differ from Roles as they may require special conditions to be satisfied. See the description of a policy for more information.",
        "x-enumNames": [
          "AccessUserResources"
        ],
        "x-enumDescriptions": [
          "Policy that allows access from the user that owns the resource as well as any admin users"
        ]
      },
      "BeatmapDTO": {
        "required": [
          "ar",
          "artist",
          "cs",
          "hp",
          "id",
          "length",
          "mapperId",
          "mapperName",
          "od",
          "osuId",
          "sr",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the beatmap",
            "format": "int32"
          },
          "artist": {
            "type": "string",
            "description": "Artist of the song"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the beatmap",
            "format": "int64"
          },
          "bpm": {
            "type": "number",
            "description": "Beats per minute",
            "format": "double",
            "nullable": true
          },
          "mapperId": {
            "type": "integer",
            "description": "osu! id of the mapper",
            "format": "int64"
          },
          "mapperName": {
            "type": "string",
            "description": "osu! username of the mapper"
          },
          "sr": {
            "type": "number",
            "description": "Star rating",
            "format": "double"
          },
          "cs": {
            "type": "number",
            "description": "Circle size",
            "format": "double"
          },
          "ar": {
            "type": "number",
            "description": "Approach rate",
            "format": "double"
          },
          "hp": {
            "type": "number",
            "description": "Hp",
            "format": "double"
          },
          "od": {
            "type": "number",
            "description": "Overall difficulty",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "Song length",
            "format": "double"
          },
          "title": {
            "type": "string",
            "description": "Title of the beatmap / song"
          },
          "diffName": {
            "type": "string",
            "description": "Name of the difficulty",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a beatmap"
      },
      "CreatedResultBaseDTO": {
        "required": [
          "id",
          "location"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "Location of the resource"
          }
        },
        "additionalProperties": false,
        "description": "Represents a newly created resource"
      },
      "FilteringFailReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "description": "Explains why the player failed filtering",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoData",
          "MinRating",
          "MaxRating",
          "IsProvisional",
          "NotEnoughTournaments",
          "PeakRatingTooHigh",
          "NotEnoughMatches"
        ],
        "x-enumDescriptions": [
          "The player passed filtering, thus there is no failure reason",
          "The player does not have a rating / profile in the o!TR database",
          "The player's rating is below the minimum threshold",
          "The player's rating is above the maximum threshold",
          "The player is provisional and the filtering criteria specifies\r\nexclusion of provisional players",
          "The player has not played in the minimum specified\r\namount of tournaments",
          "The player's all-time peak rating is above the maximum allowed",
          "The player has not played in the minimum specified amount of matches"
        ]
      },
      "FilteringRequestDTO": {
        "required": [
          "allowProvisional",
          "osuPlayerIds",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "maximum": 5,
            "minimum": 0,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "minRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating below this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating above this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "allowProvisional": {
            "type": "boolean",
            "description": "Whether to filter players that currently have a provisional rating"
          },
          "tournamentsPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have participated in at least\r\nthis many distinct tournaments",
            "format": "int32",
            "nullable": true
          },
          "peakRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "If set, requires players to have an all-time peak rating less than\r\nthis value",
            "format": "int32",
            "nullable": true
          },
          "matchesPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have played in at least\r\nthis many matches",
            "format": "int32",
            "nullable": true
          },
          "osuPlayerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of osu! player ids that will be filtered"
          }
        },
        "additionalProperties": false,
        "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
      },
      "FilteringResult": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Indicates whether a player passed or failed filtering",
        "format": "int32",
        "x-enumNames": [
          "Pass",
          "Fail"
        ],
        "x-enumDescriptions": [
          "Indicates the player passed filtering",
          "Indicates the player failed filtering"
        ]
      },
      "FilteringResultDTO": {
        "required": [
          "filteringResults",
          "playersFailed",
          "playersPassed"
        ],
        "type": "object",
        "properties": {
          "playersPassed": {
            "type": "integer",
            "description": "The number of players who passed filtering",
            "format": "int32"
          },
          "playersFailed": {
            "type": "integer",
            "description": "The number of players who failed filtering",
            "format": "int32"
          },
          "filteringResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFilteringResultDTO"
            },
            "description": "A collection of filtering results, one per submitted player,\r\nin the same order as submitted in the API.DTOs.FilteringRequestDTO"
          }
        },
        "additionalProperties": false,
        "description": "Represents a filterings result for a collection of players"
      },
      "GameDTO": {
        "required": [
          "adminNotes",
          "id",
          "mods",
          "osuId",
          "processingStatus",
          "rejectionReason",
          "ruleset",
          "scores",
          "scoringType",
          "startTime",
          "teamType",
          "verificationStatus",
          "warningFlags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "scoringType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoringType"
              }
            ],
            "description": "Represents the scoring method (win condition) for a Database.Entities.Game"
          },
          "teamType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamType"
              }
            ],
            "description": "Represents the team type used for a Database.Entities.Game (See <a href=\"https://osu.ppy.sh/wiki/en/Client/Interface/Multiplayer\"> osu! wiki - Multiplayer</a>)"
          },
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "Represents mod values"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore"
          },
          "processingStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameProcessingStatus"
              }
            ],
            "description": "The status of a Database.Entities.Game in the processing flow"
          },
          "warningFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameWarningFlags"
              }
            ],
            "description": "Warnings for irregularities in Database.Entities.Game data that don't warrant an automatic\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.PreRejected\r\nbut should have attention drawn to them during manual review"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameRejectionReason"
              }
            ],
            "description": "The reason why a Database.Entities.Game is rejected"
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp of the beginning of the game",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp of the end of the game",
            "format": "date-time",
            "nullable": true
          },
          "beatmap": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BeatmapDTO"
              }
            ],
            "description": "The beatmap played",
            "nullable": true
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          },
          "scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameScoreDTO"
            },
            "description": "All match scores"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single game (osu! beatmap) played in a match"
      },
      "GameProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Game in the processing flow",
        "format": "int32",
        "x-enumNames": [
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Game needs automation checks",
          "The Database.Entities.Game is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Game needs stat calculation\n\nGenerates the Database.Entities.GameWinRecord",
          "The Database.Entities.Game has completed all processing steps"
        ]
      },
      "GameRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Game is rejected",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoScores",
          "InvalidMods",
          "RulesetMismatch",
          "InvalidScoringType",
          "InvalidTeamType",
          "FailedTeamVsConversion",
          "NoValidScores",
          "LobbySizeMismatch",
          "NoEndTime",
          "RejectedMatch",
          "BeatmapNotPooled"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Game is not rejected",
          "The Database.Entities.Game's osu! API data did not contain any Database.Entities.GameScores",
          "The Database.Entities.Game has invalid mods applied",
          "The Database.Entities.Game's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament",
          "The Database.Entities.Game's Database.Enums.ScoringType is not Database.Enums.ScoringType.ScoreV2",
          "The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs",
          "The Database.Entities.Game's Database.Enums.TeamType is not Database.Enums.TeamType.TeamVs\r\nand attempting Database.Enums.TeamType.TeamVs conversion was not successful",
          "The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is < 2",
          "The Database.Entities.Game's number of Database.Entities.Game.Scores with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified divided by 2 is\r\nnot equal to the Database.Entities.Tournament.LobbySize of the parent Database.Entities.Tournament",
          "The Database.Entities.Game's Database.Entities.Game.EndTime could not be determined",
          "The Database.Entities.Match the Database.Entities.Game was played in was rejected",
          "The Database.Entities.Tournament has a known collection of PooledBeatmaps\r\nand the Database.Entities.Beatmap played in the Database.Entities.Game is not present\r\nin said collection"
        ]
      },
      "GameScoreDTO": {
        "required": [
          "accuracy",
          "adminNotes",
          "misses",
          "mods",
          "playerId",
          "processingStatus",
          "rejectionReason",
          "score",
          "team",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the Player this score belongs to",
            "format": "int32"
          },
          "team": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Team"
              }
            ],
            "description": "Represents the team a Database.Entities.Player was on when a Database.Entities.GameScore was set"
          },
          "score": {
            "type": "integer",
            "description": "The points earned",
            "format": "int32"
          },
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "Represents mod values"
          },
          "misses": {
            "type": "integer",
            "description": "The number of missed notes",
            "format": "int32"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore"
          },
          "processingStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoreProcessingStatus"
              }
            ],
            "description": "The status of a Database.Entities.GameScore in the processing flow"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoreRejectionReason"
              }
            ],
            "description": "The reason why a Database.Entities.GameScore is rejected"
          },
          "accuracy": {
            "type": "number",
            "description": "The accuracy of the score",
            "format": "double"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          }
        },
        "additionalProperties": false
      },
      "GameWarningFlags": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Warnings for irregularities in Database.Entities.Game data that don't warrant an automatic\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.PreRejected\r\nbut should have attention drawn to them during manual review",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "BeatmapUsedOnce"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Game has no warnings",
          "If the parent Database.Entities.Tournament does not have a submitted pool of\r\nDatabase.Entities.Beatmaps, and the Database.Entities.Game's Database.Entities.Game.Beatmap\r\nis played only once throughout the entire Database.Entities.Tournament"
        ]
      },
      "HttpValidationProblemDetails": {
        "required": [
          "errors"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          }
        ],
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "LeaderboardChartType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Global",
          "Country"
        ],
        "x-enumDescriptions": [
          "",
          ""
        ]
      },
      "LeaderboardDTO": {
        "required": [
          "filterDefaults",
          "leaderboard",
          "ruleset",
          "totalPlayerCount"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "totalPlayerCount": {
            "type": "integer",
            "format": "int32"
          },
          "filterDefaults": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaderboardFilterDefaultsDTO"
              }
            ]
          },
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardPlayerInfoDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "LeaderboardFilterDefaultsDTO": {
        "required": [
          "maxMatches",
          "maxRank",
          "maxRating"
        ],
        "type": "object",
        "properties": {
          "maxRank": {
            "type": "integer",
            "format": "int32"
          },
          "maxRating": {
            "type": "number",
            "format": "double"
          },
          "maxMatches": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaderboardPlayerInfoDTO": {
        "required": [
          "globalRank",
          "matchesPlayed",
          "name",
          "osuId",
          "playerId",
          "rating",
          "ruleset",
          "tier",
          "winRate"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "format": "int64"
          },
          "globalRank": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "tier": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "matchesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Individual line items in the leaderboard"
      },
      "MatchCreatedResultDTO": {
        "required": [
          "osuId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreatedResultBaseDTO"
          }
        ],
        "properties": {
          "osuId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created match"
      },
      "MatchDTO": {
        "required": [
          "adminNotes",
          "games",
          "id",
          "lastProcessingDate",
          "name",
          "osuId",
          "processingStatus",
          "rejectionReason",
          "ruleset",
          "tournament",
          "verificationStatus",
          "warningFlags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Title of the lobby"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "startTime": {
            "type": "string",
            "description": "Start time",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "description": "End time",
            "format": "date-time",
            "nullable": true
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchRejectionReason"
              }
            ],
            "description": "The reason why a Database.Entities.Match is rejected"
          },
          "warningFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchWarningFlags"
              }
            ],
            "description": "Warnings for irregularities in Database.Entities.Match data that don't warrant an automatic\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.PreRejected\r\nbut should have attention drawn to them during manual review"
          },
          "processingStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchProcessingStatus"
              }
            ],
            "description": "The status of a Database.Entities.Match in the processing flow"
          },
          "lastProcessingDate": {
            "type": "string",
            "description": "Timestamp of the last time the match was processed",
            "format": "date-time"
          },
          "tournament": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentCompactDTO"
              }
            ],
            "description": "The API.DTOs.TournamentCompactDTO this match was played in"
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameDTO"
            },
            "description": "List of games played during the match"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          }
        },
        "additionalProperties": false,
        "description": "Represents a played match"
      },
      "MatchProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Match in the processing flow",
        "format": "int32",
        "x-enumNames": [
          "NeedsData",
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "NeedsRatingProcessorData",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Match needs data requested from the osu! API",
          "The Database.Entities.Match needs automation checks",
          "The Database.Entities.Match is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Match needs stat calculation\n\nGenerates the Database.Entities.MatchWinRecord and Database.Entities.PlayerMatchStats",
          "The Database.Entities.Match is awaiting rating processor data\n\nGenerates all Database.Entities.Processor.RatingAdjustments",
          "The Database.Entities.Match has completed all processing steps"
        ]
      },
      "MatchQuerySortType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Denotes which property a query for !:Database.Entities.Matches will be sorted by",
        "format": "int32",
        "x-enumNames": [
          "Id",
          "OsuId",
          "StartTime",
          "EndTime",
          "Created"
        ],
        "x-enumDescriptions": [
          "Sort by primary key",
          "Sort by osu! id",
          "Sort by start time",
          "Sort by end time",
          "Sort by creation date"
        ]
      },
      "MatchRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Match is rejected",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoData",
          "NoGames",
          "NamePrefixMismatch",
          "FailedTeamVsConversion",
          "NoValidGames",
          "UnexpectedGameCount",
          "NoEndTime",
          "RejectedTournament"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Match is not rejected",
          "The osu! API returned invalid data or no data for the Database.Entities.Match",
          "The osu! API returned no Database.Entities.Games for the Database.Entities.Match",
          "The Database.Entities.Match's Database.Entities.Match.Name does not start with the\r\nparent Database.Entities.Tournament's Database.Entities.Tournament.Abbreviation",
          "The Database.Entities.Match's !:Entities.Games were eligible for Database.Enums.TeamType.TeamVs\r\nconversion and attempting Database.Enums.TeamType.TeamVs conversion was not successful",
          "The Database.Entities.Match has no Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified",
          "The Database.Entities.Match's number of Database.Entities.Match.Games with a Database.Enums.Verification.VerificationStatus\r\nof Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified is not an odd number\r\n(does not satisfy \"best of X\")",
          "The Database.Entities.Match's Database.Entities.Match.EndTime could not be determined",
          "The Database.Entities.Tournament the Database.Entities.Match was played in was rejected"
        ]
      },
      "MatchSearchResultDTO": {
        "required": [
          "id",
          "osuId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the match",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a match"
      },
      "MatchSubmissionStatusDTO": {
        "required": [
          "created",
          "id",
          "osuId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Lobby title of the match",
            "nullable": true
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "Current verification status of the match",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Date that the match was submitted",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Date that the match was last updated",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the status of a submitted match"
      },
      "MatchWarningFlags": {
        "enum": [
          0,
          1,
          2,
          4
        ],
        "type": "integer",
        "description": "Warnings for irregularities in Database.Entities.Match data that don't warrant an automatic\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.PreRejected\r\nbut should have attention drawn to them during manual review",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "UnexpectedNameFormat",
          "LowGameCount",
          "UnexpectedBeatmapsFound"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Match has no warnings",
          "The Database.Entities.Match's Database.Entities.Match.Name does not follow common tournament\r\nlobby title conventions",
          "The Database.Entities.Match's number of Database.Entities.Match.Games is exactly 3 or 4",
          "The !:Match has 1 or more !:Games with a Database.Enums.Verification.GameRejectionReason\r\nof Database.Enums.Verification.GameRejectionReason.BeatmapNotPooled outside of the first two !:Games"
        ]
      },
      "ModStatsDTO": {
        "required": [
          "gamesPlayed",
          "gamesWon",
          "normalizedAverageScore",
          "winRate"
        ],
        "type": "object",
        "properties": {
          "gamesPlayed": {
            "type": "integer",
            "format": "int32"
          },
          "gamesWon": {
            "type": "integer",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "format": "double"
          },
          "normalizedAverageScore": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents some information about a player's mod stats.\r\ne.g. how many times has the player played/won with some mod?"
      },
      "Mods": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          22688,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576,
          1049688,
          2097152,
          4194304,
          8388608,
          16777216,
          33554432,
          67108864,
          134217728,
          268435456,
          521109504,
          522171579,
          536870912,
          1073741824
        ],
        "type": "integer",
        "description": "Represents mod values",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoFail",
          "Easy",
          "TouchDevice",
          "Hidden",
          "HardRock",
          "SuddenDeath",
          "DoubleTime",
          "Relax",
          "HalfTime",
          "Nightcore",
          "Flashlight",
          "Autoplay",
          "SpunOut",
          "Relax2",
          "Perfect",
          "InvalidMods",
          "Key4",
          "Key5",
          "Key6",
          "Key7",
          "Key8",
          "FadeIn",
          "ScoreIncreaseMods",
          "Random",
          "Cinema",
          "Target",
          "Key9",
          "KeyCoop",
          "Key1",
          "Key3",
          "Key2",
          "KeyMod",
          "FreeModAllowed",
          "ScoreV2",
          "Mirror"
        ],
        "x-enumDescriptions": [
          "No mods enabled",
          "No fail (NF)",
          "Easy (EZ)",
          "Touch Device (TD)",
          "Hidden (HD)",
          "Hard Rock (HR)",
          "Sudden Death (SD)",
          "Double Time (DT)",
          "Relax (RX)",
          "Half Time (HT)",
          "Nightcore (NC)\n\nOnly set along with DoubleTime. i.e: NC only gives 576",
          "Flashlight (FL)",
          "Autoplay (AT)",
          "Spun Out (SO)",
          "Autopilot (AP)\n\nAutopilot",
          "Perfect (PF)\n\nOnly set along with Database.Enums.Mods.SuddenDeath. i.e: PF only gives 16416",
          "4 key (4K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "5 key (5K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "6 key (6K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "7 key (7K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "8 key (8K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Fade In (FI)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Random (RD)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Cinema (CM)",
          "Target Practice (TP)",
          "9 Key (9K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Co-op (CO)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "1 Key (1K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "3 Key (3K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "2 Key (2K)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Score v2 (SV2)",
          "Mirror (MR)\n\nApplicable only to Database.Enums.Ruleset.ManiaOther",
          "Denotes mods that are Database.Enums.Ruleset.ManiaOther key modifiers\n\nSee https://osu.ppy.sh/wiki/en/Gameplay/Game_modifier/xK",
          "Denotes mods that are available to use during Free Mod settings",
          "Denotes mods that directly impose a modifier on score",
          "Denotes mods that are ineligible for ratings"
        ]
      },
      "OAuthClientCreatedDTO": {
        "required": [
          "clientSecret"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OAuthClientDTO"
          }
        ],
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "Client secret of the client"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created OAuth client (The only time the client secret is available is when a new client is created)"
      },
      "OAuthClientDTO": {
        "required": [
          "clientId",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverride": {
            "type": "integer",
            "description": "Possible rate limit override for the client",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth client"
      },
      "Operation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationBase"
          }
        ],
        "properties": {
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationBase": {
        "required": [
          "operationType"
        ],
        "type": "object",
        "properties": {
          "operationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OperationType"
              }
            ],
            "readOnly": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "Operation`1": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Operation"
          }
        ],
        "additionalProperties": false
      },
      "PlayerCompactDTO": {
        "required": [
          "country",
          "id",
          "osuId",
          "ruleset",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username"
          },
          "country": {
            "type": "string",
            "description": "osu! country code"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "userId": {
            "type": "integer",
            "description": "Id of the associated user, if available",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents player information"
      },
      "PlayerFilteringResultDTO": {
        "required": [
          "filteringResult",
          "filteringResultMessage",
          "osuId"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player, if found",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The username of the player, if found",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "The osu! id of the player",
            "format": "int64"
          },
          "filteringResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilteringResult"
              }
            ],
            "description": "Indicates whether a player passed or failed filtering"
          },
          "filteringFailReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilteringFailReason"
              }
            ],
            "description": "If the user failed filtering, the fail reason",
            "nullable": true
          },
          "filteringResultMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerFilteringResultDTO.FilteringResult in string form",
            "readOnly": true
          },
          "filteringFailReasonMessage": {
            "type": "string",
            "description": "The API.DTOs.PlayerFilteringResultDTO.FilteringFailReason in string form",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one player's filtering result"
      },
      "PlayerFrequencyDTO": {
        "required": [
          "frequency",
          "osuId",
          "playerId"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the teammate or opponent",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the teammate or opponent",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username of the teammate or opponent",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "description": "Number of times this teammate or opponent has played with the player",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a player in the context of a teammate or opponent of another player"
      },
      "PlayerModStatsDTO": {
        "type": "object",
        "properties": {
          "playedNM": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with no mods",
            "nullable": true
          },
          "playedEZ": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with easy",
            "nullable": true
          },
          "playedHT": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with half time",
            "nullable": true
          },
          "playedHD": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with hidden",
            "nullable": true
          },
          "playedHR": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with hard rock",
            "nullable": true
          },
          "playedDT": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with double time",
            "nullable": true
          },
          "playedFL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with flashlight",
            "nullable": true
          },
          "playedHDHR": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with both hidden and hard rock",
            "nullable": true
          },
          "playedHDDT": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with both hidden and double time",
            "nullable": true
          },
          "playedHDEZ": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModStatsDTO"
              }
            ],
            "description": "Number of games played with both hidden and easy",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in games of differing mod combinations"
      },
      "PlayerRatingChartDTO": {
        "required": [
          "chartData"
        ],
        "type": "object",
        "properties": {
          "chartData": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlayerRatingChartDataPointDTO"
              }
            },
            "description": "List of data points used to construct the chart"
          }
        },
        "additionalProperties": false,
        "description": "Represents data used to construct a rating delta chart for a player"
      },
      "PlayerRatingChartDataPointDTO": {
        "required": [
          "isAdjustment",
          "name",
          "ratingAfter",
          "ratingBefore",
          "ratingChange",
          "volatilityAfter",
          "volatilityBefore",
          "volatilityChange"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Match name"
          },
          "matchId": {
            "type": "integer",
            "description": "Match id",
            "format": "int32",
            "nullable": true
          },
          "matchOsuId": {
            "type": "integer",
            "description": "osu! match id",
            "format": "int64",
            "nullable": true
          },
          "matchCost": {
            "type": "number",
            "description": "Match cost of the player",
            "format": "double",
            "nullable": true
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating of the player before this match occurred",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating of the player after this match occurred",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Volatility of the player before this match occurred",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Volatility of the player after this match occurred",
            "format": "double"
          },
          "ratingChange": {
            "type": "number",
            "description": "Difference in rating for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "volatilityChange": {
            "type": "number",
            "description": "Difference in volatility for the player after this match occurred",
            "format": "double",
            "readOnly": true
          },
          "isAdjustment": {
            "type": "boolean",
            "description": "Indicates whether this data point is from a rating change that occurred outside of a match (i.e. decay)"
          },
          "timestamp": {
            "type": "string",
            "description": "Match start time",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data point used to construct a rating chart for a player"
      },
      "PlayerRatingDTO": {
        "required": [
          "adjustments",
          "countryRank",
          "globalRank",
          "percentile",
          "playerId",
          "rating",
          "ruleset",
          "volatility"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "rating": {
            "type": "number",
            "description": "Rating",
            "format": "double"
          },
          "volatility": {
            "type": "number",
            "description": "Rating volatility",
            "format": "double"
          },
          "percentile": {
            "type": "number",
            "description": "Global rating percentile",
            "format": "double"
          },
          "globalRank": {
            "type": "integer",
            "description": "Global rank",
            "format": "int32"
          },
          "countryRank": {
            "type": "integer",
            "description": "Country rank",
            "format": "int32"
          },
          "playerId": {
            "type": "integer",
            "description": "Player id",
            "format": "int32"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingAdjustmentDTO"
            },
            "description": "A collection of adjustments that describe the changes resulting in the final rating"
          }
        },
        "additionalProperties": false,
        "description": "Describes tournament rating based information for a player in a ruleset that are current and not time specific"
      },
      "PlayerRatingStatsDTO": {
        "required": [
          "isProvisional",
          "matchesPlayed",
          "rankProgress",
          "tournamentsPlayed",
          "winRate"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PlayerRatingDTO"
          }
        ],
        "properties": {
          "tournamentsPlayed": {
            "type": "integer",
            "description": "Total number of tournaments played",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "Total number of matches played",
            "format": "int32"
          },
          "winRate": {
            "type": "number",
            "description": "Match win rate",
            "format": "double"
          },
          "rankProgress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankProgressDTO"
              }
            ],
            "description": "Rating tier progress information"
          },
          "isProvisional": {
            "type": "boolean",
            "description": "Denotes the current rating as being provisional"
          }
        },
        "additionalProperties": false,
        "description": "Describes tournament rating based information for a player in a ruleset with additional statistics"
      },
      "PlayerSearchResultDTO": {
        "required": [
          "id",
          "osuId",
          "thumbnail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the player",
            "format": "int64"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the player for the given ruleset",
            "format": "double",
            "nullable": true
          },
          "globalRank": {
            "type": "integer",
            "description": "Current global rank of the player for the given ruleset",
            "format": "int32",
            "nullable": true
          },
          "ratingTier": {
            "type": "string",
            "description": "Current rating tier of the player for the given ruleset",
            "nullable": true,
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the player",
            "nullable": true
          },
          "thumbnail": {
            "type": "string",
            "description": "Link to an osu! thumbnail for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a player for a given ruleset"
      },
      "PlayerStatsDTO": {
        "required": [
          "playerInfo",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "playerInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "Player info"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "rating": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerRatingStatsDTO"
              }
            ],
            "description": "Base stats for the player",
            "nullable": true
          },
          "matchStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AggregatePlayerMatchStatsDTO"
              }
            ],
            "description": "Match stats for the player",
            "nullable": true
          },
          "modStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerModStatsDTO"
              }
            ],
            "description": "Mod stats for the player",
            "nullable": true
          },
          "tournamentStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerTournamentStatsDTO"
              }
            ],
            "description": "Tournament participation and performance stats for the player",
            "nullable": true
          },
          "frequentTeammates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's teammates",
            "nullable": true
          },
          "frequentOpponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's opponents",
            "nullable": true
          },
          "ratingChart": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerRatingChartDTO"
              }
            ],
            "description": "Rating chart for the player",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of statistics for a player in a ruleset"
      },
      "PlayerTournamentLobbySizeCountDTO": {
        "type": "object",
        "properties": {
          "count1v1": {
            "type": "integer",
            "description": "Number of 1v1 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count2v2": {
            "type": "integer",
            "description": "Number of 2v2 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count3v3": {
            "type": "integer",
            "description": "Number of 3v3 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count4v4": {
            "type": "integer",
            "description": "Number of 4v4 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "countOther": {
            "type": "integer",
            "description": "Number of tournaments played outside of standard team sizes",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in tournaments of differing team sizes"
      },
      "PlayerTournamentMatchCostDTO": {
        "required": [
          "matchCost",
          "playerId",
          "ruleset",
          "tournamentAcronym",
          "tournamentId",
          "tournamentName"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "tournamentId": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "tournamentName": {
            "type": "string",
            "description": "Name of the tournament"
          },
          "tournamentAcronym": {
            "type": "string",
            "description": "Abbreviated name of the tournament"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "matchCost": {
            "type": "number",
            "description": "Average match cost across the tournament for the player",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents match cost data across an entire tournament for a player"
      },
      "PlayerTournamentStatsDTO": {
        "required": [
          "bestPerformances",
          "lobbySizeCounts",
          "recentPerformances"
        ],
        "type": "object",
        "properties": {
          "lobbySizeCounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerTournamentLobbySizeCountDTO"
              }
            ],
            "description": "Counts of participation in tournaments of differing team sizes for the player"
          },
          "bestPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of best tournament performances for the player"
          },
          "recentPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentMatchCostDTO"
            },
            "description": "List of recent tournament performances for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics for a player regarding tournament participation and performance"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RankProgressDTO": {
        "required": [
          "currentTier",
          "ratingForNextMajorTier",
          "ratingForNextTier"
        ],
        "type": "object",
        "properties": {
          "currentTier": {
            "type": "string",
            "description": "Current tier"
          },
          "currentSubTier": {
            "type": "integer",
            "description": "Current sub tier",
            "format": "int32",
            "nullable": true
          },
          "ratingForNextTier": {
            "type": "number",
            "description": "Rating required to reach next sub tier",
            "format": "double"
          },
          "ratingForNextMajorTier": {
            "type": "number",
            "description": "Rating required to reach next major tier",
            "format": "double"
          },
          "nextMajorTier": {
            "type": "string",
            "description": "Next major tier following current tier",
            "nullable": true
          },
          "subTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next sub tier as a percentage",
            "format": "double",
            "nullable": true
          },
          "majorTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next major tier as a percentage",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents rating tier progress data"
      },
      "RatingAdjustmentDTO": {
        "required": [
          "adjustmentType",
          "ratingAfter",
          "ratingBefore",
          "ratingDelta",
          "timestamp",
          "volatilityAfter",
          "volatilityBefore",
          "volatilityDelta"
        ],
        "type": "object",
        "properties": {
          "adjustmentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RatingAdjustmentType"
              }
            ],
            "description": "Represents the different types of events that result in the generation of a Database.Entities.Processor.RatingAdjustment"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of when the adjustment was applied",
            "format": "date-time"
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating before the adjustment",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating after the adjustment",
            "format": "double"
          },
          "ratingDelta": {
            "type": "number",
            "description": "Total change in rating",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Rating volatility before the adjustment",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Rating volatility after the adjustment",
            "format": "double"
          },
          "volatilityDelta": {
            "type": "number",
            "description": "Total change in rating volatility",
            "format": "double"
          },
          "matchId": {
            "type": "integer",
            "description": "Id of the match the adjustment was created for if available",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a single change to a PlayerRating"
      },
      "RatingAdjustmentType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Represents the different types of events that result in the generation of a Database.Entities.Processor.RatingAdjustment",
        "format": "int32",
        "x-enumNames": [
          "Initial",
          "Decay",
          "Match"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Processor.RatingAdjustment is the initial rating",
          "The Database.Entities.Processor.RatingAdjustment is the result of a period of inactivity (decay)",
          "The Database.Entities.Processor.RatingAdjustment is the result of participation in a Database.Entities.Match"
        ]
      },
      "Roles": {
        "enum": [
          "user",
          "client",
          "admin",
          "verifier",
          "submit",
          "whitelist"
        ],
        "type": "string",
        "description": "The possible roles assignable to a user or client",
        "x-enumNames": [
          "User",
          "Client",
          "Admin",
          "Verifier",
          "Submit",
          "Whitelist"
        ],
        "x-enumDescriptions": [
          "Role granted to all users.",
          "Role granted to all clients.",
          "Role granted to privileged users.",
          "Role granted to users with permission to verify submission data.",
          "Role granted to users with permission to submit tournament data.",
          "Role granted to users and clients to allow access during times of restricted use."
        ]
      },
      "Ruleset": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "Represents osu! play modes",
        "format": "int32",
        "x-enumNames": [
          "Osu",
          "Taiko",
          "Catch",
          "ManiaOther",
          "Mania4k",
          "Mania7k"
        ],
        "x-enumDescriptions": [
          "osu! (standard)",
          "osu! Taiko",
          "osu! Catch (aka Fruits)",
          "osu! Mania\n\nEncompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Database.Enums.Ruleset.Mania4k or Database.Enums.Ruleset.Mania7k",
          "osu! Mania 4k variant",
          "osu! Mania 7k variant"
        ]
      },
      "ScoreProcessingStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.GameScore in the processing flow",
        "format": "int32",
        "x-enumNames": [
          "NeedsAutomationChecks",
          "NeedsVerification",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.GameScore needs automation checks",
          "The Database.Entities.GameScore is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.GameScore has completed all processing steps"
        ]
      },
      "ScoreRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.GameScore is rejected",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "ScoreBelowMinimum",
          "InvalidMods",
          "RulesetMismatch",
          "RejectedGame"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.GameScore is not rejected",
          "The Database.Entities.GameScore's Database.Entities.GameScore.Score is below the minimum threshold",
          "The Database.Entities.GameScore was set with any Database.Enums.Mods.InvalidMods",
          "The Database.Entities.GameScore's Database.Enums.Ruleset does not match that of the parent Database.Entities.Tournament",
          "The Database.Entities.Game the Database.Entities.GameScore was set in was rejected"
        ]
      },
      "ScoringType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the scoring method (win condition) for a Database.Entities.Game",
        "format": "int32",
        "x-enumNames": [
          "Score",
          "Accuracy",
          "Combo",
          "ScoreV2"
        ],
        "x-enumDescriptions": [
          "Scoring based on Score v1",
          "Scoring based on accuracy",
          "Scoring based on combo",
          "Scoring based on Score v2"
        ]
      },
      "SearchResponseCollectionDTO": {
        "required": [
          "matches",
          "players",
          "tournaments"
        ],
        "type": "object",
        "properties": {
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentSearchResultDTO"
            },
            "description": "A collection of search results for tournaments matching the search query"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchSearchResultDTO"
            },
            "description": "A collection of search results for matches matching the search query"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSearchResultDTO"
            },
            "description": "A collection of search results for players matching the search query"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of search results"
      },
      "Team": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Represents the team a Database.Entities.Player was on when a Database.Entities.GameScore was set",
        "format": "int32",
        "x-enumNames": [
          "NoTeam",
          "Blue",
          "Red"
        ],
        "x-enumDescriptions": [
          "No team",
          "Team blue",
          "Team red"
        ]
      },
      "TeamType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the team type used for a Database.Entities.Game (See <a href=\"https://osu.ppy.sh/wiki/en/Client/Interface/Multiplayer\"> osu! wiki - Multiplayer</a>)",
        "format": "int32",
        "x-enumNames": [
          "HeadToHead",
          "TagCoop",
          "TeamVs",
          "TagTeamVs"
        ],
        "x-enumDescriptions": [
          "Free for all",
          "Free for all (Tag format)\n\nAll players play tag on the same beatmap",
          "Team red vs team blue",
          "Team red vs team blue (Tag format)"
        ]
      },
      "TournamentCompactDTO": {
        "required": [
          "abbreviation",
          "created",
          "endTime",
          "forumUrl",
          "id",
          "lobbySize",
          "name",
          "processingStatus",
          "rankRangeLowerBound",
          "rejectionReason",
          "ruleset",
          "startTime",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of submission",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Full name"
          },
          "abbreviation": {
            "type": "string"
          },
          "forumUrl": {
            "type": "string",
            "description": "The osu! forum post or wiki page this tournament is featured by (If both are present, the osu! forum post should be used)"
          },
          "rankRangeLowerBound": {
            "type": "integer",
            "description": "Lowest rank a player can be to participate",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "lobbySize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "The start date of the first match",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end date of the last match",
            "format": "date-time"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore"
          },
          "processingStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentProcessingStatus"
              }
            ],
            "description": "The status of a Database.Entities.Tournament in the processing flow"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentRejectionReason"
              }
            ],
            "description": "The reason why a Database.Entities.Tournament is rejected"
          },
          "submittedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The user that submitted the tournament",
            "nullable": true
          },
          "verifiedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The user that verified the tournament",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a tournament with minimal data"
      },
      "TournamentCreatedResultDTO": {
        "required": [
          "abbreviation",
          "matches",
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreatedResultBaseDTO"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchCreatedResultDTO"
            },
            "description": "List of created matches"
          }
        },
        "additionalProperties": false,
        "description": "Represents a created tournament"
      },
      "TournamentDTO": {
        "required": [
          "adminNotes",
          "matches"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TournamentCompactDTO"
          }
        ],
        "properties": {
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDTO"
            },
            "description": "All associated match data (Will be empty for bulk requests such as List)"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All admin notes associated with the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a tournament including optional data"
      },
      "TournamentProcessingStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "The status of a Database.Entities.Tournament in the processing flow",
        "format": "int32",
        "x-enumNames": [
          "NeedsApproval",
          "NeedsMatchData",
          "NeedsAutomationChecks",
          "NeedsVerification",
          "NeedsStatCalculation",
          "Done"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Tournament is awaiting approval from a\r\nDatabase.Entities.User with verifier permission\n\nFunctions as the entry point to the processing flow. No entities owned by a Database.Entities.Tournament\r\nwill advance through the processing flow until approved.",
          "The Database.Entities.Tournament has Database.Entities.Matches with a\r\nDatabase.Enums.Verification.MatchProcessingStatus of Database.Enums.Verification.MatchProcessingStatus.NeedsData",
          "The Database.Entities.Tournament needs automation checks",
          "The Database.Entities.Tournament is awaiting verification from a\r\nDatabase.Entities.User with verifier permission",
          "The Database.Entities.Tournament needs stat calculation",
          "The tournament has completed all processing steps"
        ]
      },
      "TournamentQuerySortType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Defines how to sort the results of fetching all tournaments",
        "format": "int32",
        "x-enumNames": [
          "Id",
          "StartTime",
          "EndTime",
          "Name",
          "Created"
        ],
        "x-enumDescriptions": [
          "Sort by primary key",
          "Sort by start date",
          "Sort by start date",
          "Sort by name",
          "Sort by created date"
        ]
      },
      "TournamentRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32
        ],
        "type": "integer",
        "description": "The reason why a Database.Entities.Tournament is rejected",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoVerifiedMatches",
          "NotEnoughVerifiedMatches",
          "AbnormalWinCondition",
          "AbnormalFormat",
          "VaryingLobbySize",
          "IncompleteData"
        ],
        "x-enumDescriptions": [
          "The Database.Entities.Tournament is not rejected",
          "The Database.Entities.Tournament has no Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or Database.Enums.Verification.VerificationStatus.PreVerified",
          "The Database.Entities.Tournament's number of Database.Entities.Tournament.Matches with a\r\nDatabase.Enums.Verification.VerificationStatus of Database.Enums.Verification.VerificationStatus.Verified or\r\nDatabase.Enums.Verification.VerificationStatus.PreVerified is below 80% of the total",
          "The Database.Entities.Tournament's win condition is not Database.Enums.ScoringType.ScoreV2\n\nOnly assigned via a \"rejected submission\". <br />\r\nCovers cases such as gimmicky win conditions, mixed win conditions, etc",
          "The Database.Entities.Tournament's format is not suitable for ratings\n\nOnly assigned via a \"rejected submission\". <br />\r\nCovers cases such as excessive gimmicks, relax, multiple modes, etc",
          "The Database.Entities.Tournament's lobby sizes are not consistent.\n\nOnly assigned via a \"rejected submission\". <br />\r\nCovers cases such as > 2 teams in lobby at once, async lobbies, team size gimmicks, varying team sizes, etc",
          "The Database.Entities.Tournament's data is incomplete or not recoverable\r\nCovers cases where match links are lost to time, private,\r\nmain sheet is deleted, missing rounds, etc.\n\nOnly assigned via a \"rejected submission\". <br />\r\nCovers cases where match links are lost to time / dead / private, main sheet is deleted, missing rounds, etc"
        ]
      },
      "TournamentSearchResultDTO": {
        "required": [
          "id",
          "lobbySize",
          "name",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "lobbySize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a tournament"
      },
      "TournamentSubmissionDTO": {
        "required": [
          "abbreviation",
          "beatmapIds",
          "forumUrl",
          "ids",
          "lobbySize",
          "name",
          "rankRangeLowerBound",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "minLength": 1,
            "type": "string",
            "description": "Acronym / shortened name of the tournament"
          },
          "forumUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "lobbySize": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentRejectionReason"
              }
            ],
            "description": "Optional rejection reason. If set, the created tournament and all matches will be rejected\r\nfor this reason and go through no additional processing (Submissions with a rejection reason will only be accepted from admin users)",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of osu! match ids"
          },
          "beatmapIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A collection of pooled osu! beatmap ids"
          }
        },
        "additionalProperties": false,
        "description": "An incoming tournament submission"
      },
      "UserCompactDTO": {
        "required": [
          "id",
          "player"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "lastLogin": {
            "type": "string",
            "description": "Timestamp of the user's last login to the o!TR website",
            "format": "date-time",
            "nullable": true
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The associated player"
          }
        },
        "additionalProperties": false,
        "description": "Represents user information"
      },
      "UserDTO": {
        "required": [
          "scopes",
          "settings"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserCompactDTO"
          }
        ],
        "properties": {
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the user"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSettingsDTO"
              }
            ],
            "description": "Settings of the user"
          }
        },
        "additionalProperties": false,
        "description": "Represents user information including optional data"
      },
      "UserSettingsDTO": {
        "required": [
          "ruleset",
          "rulesetIsControlled"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Represents osu! play modes"
          },
          "rulesetIsControlled": {
            "type": "boolean",
            "description": "Denotes whether the associated user has overwritten their default ruleset (If false, the default ruleset is always the same as the user's default ruleset on the osu! website)"
          }
        },
        "additionalProperties": false,
        "description": "Represents user controlled settings for otr-web"
      },
      "VerificationStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "The verification status of a Database.Entities.Tournament,\r\nDatabase.Entities.Match, Database.Entities.Game, or Database.Entities.GameScore",
        "format": "int32",
        "x-enumNames": [
          "None",
          "PreRejected",
          "PreVerified",
          "Rejected",
          "Verified"
        ],
        "x-enumDescriptions": [
          "Verification status has not yet been assigned",
          "The Data Worker has identified an issue during processing",
          "The Data Worker has not identified any issues during processing",
          "Determined to be unfit for ratings by manual review",
          "Determined to be fit for ratings by manual review"
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization using the Bearer scheme. Paste **ONLY** your JWT in the text box below",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth2 Authentication",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "api/v1.0/OAuth/token",
            "refreshUrl": "api/v1.0/OAuth/refresh",
            "scopes": {
              "user": "Role granted to all users.",
              "client": "Role granted to all clients.",
              "admin": "Role granted to privileged users.",
              "verifier": "Role granted to users with permission to verify submission data.",
              "submit": "Role granted to users with permission to submit tournament data.",
              "whitelist": "Role granted to users and clients to allow access during times of restricted use."
            }
          },
          "authorizationCode": {
            "authorizationUrl": "api/v1.0/OAuth/authorize",
            "refreshUrl": "api/v1.0/OAuth/refresh",
            "scopes": {
              "user": "Role granted to all users.",
              "client": "Role granted to all clients.",
              "admin": "Role granted to privileged users.",
              "verifier": "Role granted to users with permission to verify submission data.",
              "submit": "Role granted to users with permission to submit tournament data.",
              "whitelist": "Role granted to users and clients to allow access during times of restricted use."
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}