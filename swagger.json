{
  "openapi": "3.0.1",
  "info": {
    "title": "osu! Tournament Rating API",
    "description": "The official resource for reading and writing data within the osu! Tournament Rating platform.",
    "termsOfService": "https://docs.otr.stagec.xyz/About/Terms-of-Use",
    "version": "v1"
  },
  "paths": {
    "/api/v1/{entity}/{entityId}/notes": {
      "post": {
        "tags": [
          "AdminNotes"
        ],
        "summary": "Create an admin note for an entity",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "AdminNotes_createNote",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Type of entity to target for admin note actions",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminNoteRouteTarget"
                }
              ],
              "description": "Type of entity to target for admin note actions"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "An entity matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The authorized user does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Returns the created admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "AdminNotes"
        ],
        "summary": "List admin notes for an entity",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "AdminNotes_listNotes",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Entity id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Type of entity to target for admin note actions",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminNoteRouteTarget"
                }
              ],
              "description": "Type of entity to target for admin note actions"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "An entity matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all admin notes for the entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminNoteDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/{entity}/notes/{noteId}": {
      "patch": {
        "tags": [
          "AdminNotes"
        ],
        "summary": "Update an admin note",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "AdminNotes_updateNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Type of entity to target for admin note actions",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminNoteRouteTarget"
                }
              ],
              "description": "Type of entity to target for admin note actions"
            }
          }
        ],
        "requestBody": {
          "description": "New content of the admin note",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "An admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User is attempting to update a note which they do not own",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The update was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated admin note",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "AdminNotes"
        ],
        "summary": "Delete an admin note",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "AdminNotes_deleteNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Admin note id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entity",
            "in": "path",
            "description": "Type of entity to target for admin note actions",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdminNoteRouteTarget"
                }
              ],
              "description": "Type of entity to target for admin note actions"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "An admin note matching the given noteId does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User is attempting to delete a note which they do not own",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The deletion was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "The admin note was deleted"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/audit/entity/{entityType}/{entityId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audits for a specific entity",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Audit_getEntityAudits",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity to get audits for",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEntityType"
                }
              ]
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The ID of the entity to get audits for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of audits for the specified entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/audit/user/{userId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get audits performed by a specific user",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Audit_getUserAudits",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to get audits for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of audits performed by the specified user",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/auth/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in to o!TR",
        "operationId": "Auth_login",
        "parameters": [
          {
            "name": "redirectUri",
            "in": "query",
            "description": "Redirects the client to the given uri after login",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out from o!TR",
        "operationId": "Auth_logout",
        "parameters": [
          {
            "name": "redirectUri",
            "in": "query",
            "description": "Redirects the client to the given uri after logout",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/auth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate using client credentials",
        "operationId": "Auth_authenticateClient",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "Client id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientSecret",
            "in": "query",
            "description": "Client secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Could not authenticate",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns client access credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCredentialsDTO"
                }
              }
            }
          }
        },
        "x-requiresAuthorization": false
      }
    },
    "/api/v1/beatmaps": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "List all beatmaps",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Beatmaps_list",
        "responses": {
          "200": {
            "description": "Returns all beatmaps",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/beatmaps/{key}": {
      "get": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "Get a beatmap",
        "description": "Get a beatmap searching first by id, then by osu! id\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Beatmaps_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key (id or osu! id)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A beatmap matching the given key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a beatmap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/beatmaps/{id}/fetch": {
      "post": {
        "tags": [
          "Beatmaps"
        ],
        "summary": "Enqueues a message to fetch beatmap data from the osu! API",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Beatmaps_fetch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The osu! beatmap ID to fetch data for",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "The message queue priority for processing this fetch request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessagePriority"
                }
              ],
              "default": 5
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The fetch request was accepted and queued for processing",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "The provided beatmap ID is negative",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/clients": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create a new OAuth client",
        "description": "Client secret is only returned from creation.\r\nThe user will have to reset the secret if they lose access.\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Clients_create",
        "responses": {
          "200": {
            "description": "Returns created client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/clients/{id}/ratelimit": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Set the rate limit for a client",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Clients_patchRateLimit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new rate limit for the client",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A client matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated client",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/filtering": {
      "post": {
        "tags": [
          "Filtering"
        ],
        "summary": "Filter a list of users based on the criteria as described in\r\nAPI.DTOs.FilteringResultDTO",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Filtering_filter",
        "requestBody": {
          "description": "The filtering request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilteringRequestDTO"
                  }
                ],
                "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request body is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "The filtering result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteringResultDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/filtering/{id}": {
      "get": {
        "tags": [
          "Filtering"
        ],
        "summary": "Get a stored filter report by ID",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Filtering_getFilterReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The filter report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The filter report was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The filter report",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilterReportDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterReportDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterReportDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/games/{id}": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Games_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "Whether the game's scores must be verified",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a game",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "Games"
        ],
        "summary": "Amend game data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A game matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated game",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Delete a game",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Game id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The game was deleted successfully"
          },
          "404": {
            "description": "A game matching the given id does not exist"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/games/{id}:merge": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Merge scores from source games into a target game. The source games must be from the same match\r\nand have the same beatmap as the target game. After successful merging, the source games are deleted.",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Games_mergeScores",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the game to merge scores into",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Game ids whose scores will be merged into the target game",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Merge failed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "State of the game after merging",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/gamescores/{id}": {
      "get": {
        "tags": [
          "GameScores"
        ],
        "summary": "Get a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the score",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "GameScores"
        ],
        "summary": "Amend score data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated score",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameScoreDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "GameScores"
        ],
        "summary": "Delete a score",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "GameScores_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Score id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A score matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "The score was deleted successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Get a leaderboard of players which fit an optional request query",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Leaderboards_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 10,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset for leaderboard data",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ],
              "default": 0
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "ISO country code (Leaderboard will be global if not provided)",
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "minOsuRank",
            "in": "query",
            "description": "osu! rank floor (The \"better\" inclusive rank bound.\r\nIf given, only players with a rank greater than or equal to this value will be included)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxOsuRank",
            "in": "query",
            "description": "osu! rank ceiling (The \"worse\" inclusive rank bound.\r\nIf given, only players with a rank less than or equal to this value will be included)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minRating",
            "in": "query",
            "description": "Rating floor (The \"worse\" inclusive rating bound.\r\nIf given, only players with a rating greater than or equal to this value will be included)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxRating",
            "in": "query",
            "description": "Rating ceiling (The \"better\" inclusive rating bound.\r\nIf given, only players with a rating less than or equal to this value will be included)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minMatches",
            "in": "query",
            "description": "Minimum number of matches played",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxMatches",
            "in": "query",
            "description": "Maximum number of matches played",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minWinRate",
            "in": "query",
            "description": "Minimum win rate",
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maxWinRate",
            "in": "query",
            "description": "Maximum win rate",
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "bronze",
            "in": "query",
            "description": "Explicitly include bronze players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "silver",
            "in": "query",
            "description": "Explicitly include silver players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gold",
            "in": "query",
            "description": "Explicitly include gold players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "platinum",
            "in": "query",
            "description": "Explicitly include platinum players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "emerald",
            "in": "query",
            "description": "Explicitly include emerald players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "diamond",
            "in": "query",
            "description": "Explicitly include diamond players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "master",
            "in": "query",
            "description": "Explicitly include master players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "grandmaster",
            "in": "query",
            "description": "Explicitly include grandmaster players",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "eliteGrandmaster",
            "in": "query",
            "description": "Explicitly include elite grandmaster players",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the leaderboard",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get all matches which fit an optional request query",
        "description": "Will not include game data\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Matches_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Filters results for only matches played in a specified ruleset",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results for only matches with a partially matching name (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filters results for only matches that occurred on or after a specified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filters results for only matches that occurred on or before a specified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filters results for only matches with a specified verification status",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationStatus"
                }
              ]
            }
          },
          {
            "name": "rejectionReason",
            "in": "query",
            "description": "Filters results for only matches with a specified rejection reason",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchRejectionReason"
                }
              ]
            }
          },
          {
            "name": "submittedBy",
            "in": "query",
            "description": "Filters results for only matches submitted by a user with a specified id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verifiedBy",
            "in": "query",
            "description": "Filters results for only matches verified by a user with a specified id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key used to sort results by",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchQuerySortType"
                }
              ],
              "default": 2
            }
          },
          {
            "name": "descending",
            "in": "query",
            "description": "Whether the results are sorted in descending order by the API.DTOs.MatchRequestQueryDTO.Sort",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all matches which fit the request query",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a match",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Matches_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "Matches"
        ],
        "summary": "Amend match data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated match",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Matches"
        ],
        "summary": "Delete a match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "The match was deleted successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}:merge": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Links games from provided matches into a single match id before deleting\r\nthe provided matches",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_merge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the match to link games to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Match ids to unlink games from before deletion",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "State of the match after merging",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/matches/{id}/player/{playerId}": {
      "delete": {
        "tags": [
          "Matches"
        ],
        "summary": "Delete all scores belonging to a player for a given match",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Matches_deletePlayerScores",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Match id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "playerId",
            "in": "path",
            "description": "Player id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A match matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the number of scores deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the currently logged in user",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_get",
        "responses": {
          "200": {
            "description": "Returns the currently logged in user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/stats": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get player stats for the currently logged in user",
        "description": "If no ruleset is provided, the player's default is used. Common.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerDashboardStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_getStats",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to `GET` `/players/{key}/stats`"
          },
          "200": {
            "description": "Returns the currently logged in user's player stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/tournaments": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get all tournaments the currently logged in user has participated in",
        "description": "If no ruleset is provided, returns tournaments from all rulesets.\r\nIf no date range is provided, gets all tournaments without date filtering.\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_getTournaments",
        "parameters": [
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to `GET` `/players/{key}/tournaments`"
          },
          "404": {
            "description": "The user does not have an associated player",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a collection of tournaments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/settings/ruleset": {
      "patch": {
        "tags": [
          "Me"
        ],
        "summary": "Update the ruleset for the currently logged in user",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_updateRuleset",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "308": {
            "description": "Redirects to `PATCH` `/users/{id}/settings/ruleset`"
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/me/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Sync the ruleset of the currently logged in user to their osu! ruleset",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Me_syncRuleset",
        "responses": {
          "308": {
            "description": "Permanent Redirect"
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          },
          "307": {
            "description": "Redirects to `POST` `/users/{id}/settings/ruleset:sync`"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/stats": {
      "get": {
        "tags": [
          "PlatformStats"
        ],
        "summary": "Get various platform-wide stats",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "PlatformStats_get",
        "responses": {
          "200": {
            "description": "Returns various platform-wide stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformStatsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a player",
        "description": "Get a player searching first by id, then by osu! id, then osu! username\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Players_get",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key (id, osu! id, or osu! username)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerCompactDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}/stats": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get a player's stats",
        "description": "Gets player by versatile search.\r\nIf no ruleset is provided, the player's default is used. Common.Enums.Ruleset.Osu is used as a fallback.\r\nIf a ruleset is provided but the player has no data for it, all optional fields of the response will be null.\r\nAPI.DTOs.PlayerDashboardStatsDTO.PlayerInfo will always be populated as long as a player is found.\r\nIf no date range is provided, gets all stats without considering date\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Players_getStats",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given search key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a player's stats",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDashboardStatsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}/tournaments": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get all tournaments a player has participated in",
        "description": "Gets tournaments for a player by versatile search.\r\nIf no ruleset is provided, returns tournaments from all rulesets.\r\nIf no date range is provided, gets all tournaments without date filtering.\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Players_getTournaments",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Search key (id, osu! id, or osu! username)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Ruleset to filter for",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filter from earliest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filter to latest date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A player matching the given key does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a collection of tournaments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/players/{key}/fetch": {
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Enqueues a message to fetch player data from the osu! API",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Players_fetch",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The osu! player ID to fetch data for",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "The message queue priority for processing this fetch request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessagePriority"
                }
              ],
              "default": 5
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The fetch request was accepted and queued for processing",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "The provided osu! player ID is negative",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for tournaments, matches, and users",
        "description": "Search uses partial matching on: tournament name and abbreviation, match name, and player name\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Search_search",
        "parameters": [
          {
            "name": "searchKey",
            "in": "query",
            "description": "Search key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of tournaments, matches, and usernames matching the given search key",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponseCollectionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}": {
      "delete": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Delete a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tournament was deleted successfully"
          },
          "404": {
            "description": "A tournament matching the given id does not exist"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get a tournament",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Tournaments_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "patch": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Amend tournament data",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JsonPatch data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "JsonPatch data is malformed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCompactDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCompactDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCompactDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}:accept-pre-verification-statuses": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Mark pre-rejected items as rejected, marks pre-verified\r\nitems as verified. Applies for the tournament and all children.",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_acceptPreVerificationStatuses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All items were updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}:reset-automation-statuses": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Rerun automation checks for a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_rerunAutomationChecks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "overrideVerifiedState",
            "in": "query",
            "description": "Whether to override existing human-verified or rejected states",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "If a tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The entities were updated successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/beatmaps": {
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Add beatmaps to a tournament by osu! id",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_insertBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A collection of osu! beatmap ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The beatmaps were added successfully"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "delete": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Delete all pooled beatmaps from a tournament. This does not alter the beatmaps table. This only\r\ndeletes the mapping between a tournament and a pooled beatmap.",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Tournaments_deleteBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An optional collection of specific beatmap ids to remove from the pooled beatmaps collection",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "All beatmaps were successfully removed"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get all beatmaps pooled by a tournament",
        "description": "\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Tournaments_getBeatmaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of pooled beatmaps",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeatmapDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Get all tournaments which fit an optional request query",
        "description": "Results will not include match data\n\nRequires Authorization:\n\nPolicy: ApiKey",
        "operationId": "Tournaments_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "Filters results for only tournaments that are verified",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "ruleset",
            "in": "query",
            "description": "Filters results for only tournaments played in a specified ruleset",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ruleset"
                }
              ]
            }
          },
          {
            "name": "searchQuery",
            "in": "query",
            "description": "Filters results for only tournaments with a partially matching name or abbreviation (case insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateMin",
            "in": "query",
            "description": "Filters results for only tournaments that occurred on or after a specified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateMax",
            "in": "query",
            "description": "Filters results for only tournaments that occurred on or before a specified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filters results for only tournaments with a specified verification status",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationStatus"
                }
              ]
            }
          },
          {
            "name": "rejectionReason",
            "in": "query",
            "description": "Filters results for only tournaments with a specified rejection reason",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TournamentRejectionReason"
                }
              ]
            }
          },
          {
            "name": "submittedBy",
            "in": "query",
            "description": "Filters results for only tournaments submitted by a user with a specified id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verifiedBy",
            "in": "query",
            "description": "Filters results for only tournaments verified by a user with a specified id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lobbySize",
            "in": "query",
            "description": "Filters results for only tournaments played with a specified lobby size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key used to sort results by",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TournamentQuerySortType"
                }
              ],
              "default": 2
            }
          },
          {
            "name": "descending",
            "in": "query",
            "description": "Whether the results are sorted in descending order by the API.DTOs.TournamentRequestQueryDTO.Sort",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all tournaments which fit the request query",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TournamentDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "ApiKey": [ ]
          }
        ],
        "x-requiresAuthorization": true
      },
      "post": {
        "tags": [
          "Tournaments"
        ],
        "summary": "Submit a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user",
        "operationId": "Tournaments_create",
        "requestBody": {
          "description": "Tournament submission data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentSubmissionDTO"
                  }
                ],
                "description": "An incoming tournament submission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The tournament submission is malformed or\r\na tournament matching the given name and ruleset already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Returns location information for the created tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TournamentCreatedResultDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/tournaments/{id}/matches": {
      "get": {
        "tags": [
          "Tournaments"
        ],
        "summary": "List all matches from a tournament",
        "description": "\n\nRequires Authorization:\n\nClaim(s): user, client",
        "operationId": "Tournaments_listMatches",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tournament id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A tournament matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns all matches from a tournament",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "user",
              "client"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/scopes": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's scopes",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Users_updateScopes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of scopes to assign to the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "A given scope is invalid, or the update was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/submissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's match submissions",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_getSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of submissions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchSubmissionStatusDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/submissions:reject": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reject a user's match submissions",
        "description": "\n\nRequires Authorization:\n\nClaim(s): admin",
        "operationId": "Users_rejectSubmissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          },
          "400": {
            "description": "The operation was not successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          },
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's OAuth clients",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_getClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of OAuth clients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthClientDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients/{clientId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's OAuth client",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_deleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "OAuth client id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist\r\nor an OAuth client matching the given id is not owned by the user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The deletion was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The deletion was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/clients/{clientId}/secret:reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the secret of a user's OAuth client",
        "description": "\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_resetClientSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "OAuth client id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist\r\nor an OAuth client matching the given id is not owned by the user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns new client credentials",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientCreatedDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/settings/ruleset": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update the ruleset of a user",
        "description": "If a user's preferred ruleset was previously being synced with the one selected on their osu! profile,\r\nupdating it will stop their preferred ruleset from being synced in the future unless it is requested\r\nto be synced again\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_updateRuleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new ruleset",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ruleset"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    },
    "/api/v1/users/{id}/settings/ruleset:sync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sync the ruleset of a user with their osu! ruleset",
        "description": "Sets the user's preferred ruleset to the one currently selected on their osu! profile\r\nand in the future will continuously update if the ruleset selected on their osu! profile changes\n\nRequires Authorization:\n\nPolicy: AccessUserResources",
        "operationId": "Users_syncRuleset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "A user matching the given id does not exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The operation was not successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The operation was successful"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ],
        "x-requiresAuthorization": true
      }
    }
  },
  "components": {
    "schemas": {
      "AccessCredentialsDTO": {
        "required": [
          "accessToken",
          "expiresIn"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Lifetime of the access token in seconds",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents access credentials and their expiry"
      },
      "AdminNoteDTO": {
        "required": [
          "adminUser",
          "created",
          "id",
          "note",
          "referenceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the admin note",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "Timestamp of creation",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Timestamp of the last update, if available",
            "format": "date-time",
            "nullable": true
          },
          "referenceId": {
            "type": "integer",
            "description": "Id of the parent entity",
            "format": "int32"
          },
          "adminUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The admin user that created the note"
          },
          "note": {
            "type": "string",
            "description": "Content of the note"
          }
        },
        "additionalProperties": false,
        "description": "Represents a note for an entity created by an admin"
      },
      "AdminNoteRouteTarget": {
        "enum": [
          "game",
          "gamescore",
          "match",
          "oauthclient",
          "player",
          "tournament"
        ],
        "type": "string",
        "additionalProperties": false,
        "description": "Type of entity to target for admin note actions",
        "x-enumNames": [
          "Game",
          "GameScore",
          "Match",
          "OAuthClient",
          "Player",
          "Tournament"
        ]
      },
      "AggregatePlayerMatchStatsDTO": {
        "required": [
          "averageGamesPlayedAggregate",
          "averageMatchCostAggregate",
          "averagePlacingAggregate",
          "bestWinStreak",
          "gamesLost",
          "gamesPlayed",
          "gamesWon",
          "gameWinRate",
          "highestRating",
          "matchAverageAccuracyAggregate",
          "matchAverageMissesAggregate",
          "matchAverageScoreAggregate",
          "matchesLost",
          "matchesPlayed",
          "matchesWon",
          "matchWinRate",
          "ratingGained"
        ],
        "type": "object",
        "properties": {
          "averageMatchCostAggregate": {
            "type": "number",
            "description": "The player's average match cost during the period",
            "format": "double"
          },
          "highestRating": {
            "type": "number",
            "description": "The peak rating achieved by the player during the period",
            "format": "double"
          },
          "ratingGained": {
            "type": "number",
            "description": "The amount of rating gained from the start of the period to the end of the period",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The amount of games won during the period",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The amount of games lost during the period",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The amount of games played during the period",
            "format": "int32"
          },
          "matchesWon": {
            "type": "integer",
            "description": "The amount of matches won during the period",
            "format": "int32"
          },
          "matchesLost": {
            "type": "integer",
            "description": "The amount of matches lost during the period",
            "format": "int32"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "The amount of matches played during the period",
            "format": "int32",
            "readOnly": true
          },
          "gameWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's game win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "matchWinRate": {
            "type": "number",
            "description": "A value between 0 and 1 representing the player's match win rate during the period",
            "format": "double",
            "readOnly": true
          },
          "bestWinStreak": {
            "type": "integer",
            "description": "The most amount of matches won in a row during the period",
            "format": "int32"
          },
          "matchAverageScoreAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average score across the entire lobby. This average includes\r\nscores for games the player may have not been in for",
            "format": "double"
          },
          "matchAverageMissesAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average miss count of the lobby, across all games in that match",
            "format": "double"
          },
          "matchAverageAccuracyAggregate": {
            "type": "number",
            "description": "Across all matches the player has played in, the average accuracy of the lobby, across all games in that match",
            "format": "double"
          },
          "averageGamesPlayedAggregate": {
            "type": "number",
            "description": "The amount of maps the player participates in, on average.",
            "format": "double"
          },
          "averagePlacingAggregate": {
            "type": "number",
            "description": "The average lobby ranking the player has on maps they participate in.\r\nA top-score is 1, bottom score would be team size * 2",
            "format": "double"
          },
          "periodStart": {
            "type": "string",
            "description": "The beginning of the period for which the statistics are calculated.",
            "format": "date-time",
            "nullable": true
          },
          "periodEnd": {
            "type": "string",
            "description": "The end of the period for which the statistics are calculated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an aggregate of match statistics for a player during a period of time"
      },
      "AuditActionType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Created",
          "Updated",
          "Deleted"
        ],
        "x-enumDescriptions": [
          "The entity was created",
          "The entity was updated",
          "The entity was deleted"
        ]
      },
      "AuditDTO": {
        "required": [
          "actionType",
          "changes",
          "entityId",
          "entityType",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of the audit record",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "description": "Id of the user who performed the action, if available (Will be null for system-generated actions or actions performed by anonymous users)",
            "format": "int32",
            "nullable": true
          },
          "actionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditActionType"
              }
            ],
            "description": "The type of action that was performed on the entity"
          },
          "entityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEntityType"
              }
            ],
            "description": "The type of entity that was modified"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp when the action was performed",
            "format": "date-time"
          },
          "entityId": {
            "type": "integer",
            "description": "Id of the entity that was modified (This is a locked copy of the entity's primary key that persists even if the original entity is deleted)",
            "format": "int32"
          },
          "changes": {
            "type": "string",
            "description": "JSON object containing all field changes made to the entity.\r\nFormat: { \"FieldName\": { \"NewValue\": value, \"OriginalValue\": value }, ... }"
          }
        },
        "additionalProperties": false,
        "description": "Represents an audit record tracking changes made to entities in the system"
      },
      "AuditEntityType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Game",
          "GameScore",
          "Match",
          "Tournament"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "AuthorizationPolicies": {
        "enum": [
          "AccessUserResources"
        ],
        "type": "string",
        "description": "The possible authorization policies enforced on a route. Authorization policies differ from Roles as they may require special conditions to be satisfied. See the description of a policy for more information.",
        "x-enumNames": [
          "AccessUserResources"
        ],
        "x-enumDescriptions": [
          "Policy that allows access from the user that owns the resource as well as any admin users"
        ]
      },
      "BeatmapAttributesDTO": {
        "required": [
          "mods",
          "sr"
        ],
        "type": "object",
        "properties": {
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "Mods applied"
          },
          "sr": {
            "type": "number",
            "description": "Star rating with applied mods",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents a beatmap's attributes"
      },
      "BeatmapDTO": {
        "required": [
          "ar",
          "attributes",
          "creators",
          "cs",
          "hp",
          "id",
          "od",
          "osuId",
          "sr",
          "totalLength"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the beatmap",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the beatmap",
            "format": "int64"
          },
          "bpm": {
            "type": "number",
            "description": "Beats per minute",
            "format": "double",
            "nullable": true
          },
          "sr": {
            "type": "number",
            "description": "Star rating",
            "format": "double"
          },
          "cs": {
            "type": "number",
            "description": "Circle size",
            "format": "double"
          },
          "ar": {
            "type": "number",
            "description": "Approach rate",
            "format": "double"
          },
          "hp": {
            "type": "number",
            "description": "HP drain rate",
            "format": "double"
          },
          "od": {
            "type": "number",
            "description": "Overall difficulty",
            "format": "double"
          },
          "totalLength": {
            "type": "integer",
            "description": "Song length",
            "format": "int64"
          },
          "diffName": {
            "type": "string",
            "description": "Name of the difficulty",
            "nullable": true
          },
          "beatmapsetId": {
            "type": "integer",
            "description": "Beatmapset id",
            "format": "int32",
            "nullable": true
          },
          "beatmapset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BeatmapsetCompactDTO"
              }
            ],
            "description": "Beatmapset",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeatmapAttributesDTO"
            },
            "description": "Beatmap attributes"
          },
          "creators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerCompactDTO"
            },
            "description": "Beatmap creators"
          }
        },
        "additionalProperties": false,
        "description": "Represents a beatmap"
      },
      "BeatmapRankedStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          -2,
          -1
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Pending",
          "Ranked",
          "Approved",
          "Qualified",
          "Loved",
          "Graveyard",
          "WorkInProgress"
        ],
        "x-enumDescriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "BeatmapsetCompactDTO": {
        "required": [
          "artist",
          "creatorId",
          "id",
          "osuId",
          "rankedStatus",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Beatmapset id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! beatmapset id",
            "format": "int64"
          },
          "artist": {
            "maxLength": 512,
            "type": "string",
            "description": "Artist"
          },
          "title": {
            "maxLength": 512,
            "type": "string",
            "description": "Title"
          },
          "rankedStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BeatmapRankedStatus"
              }
            ],
            "description": "Ranked status"
          },
          "rankedDate": {
            "type": "string",
            "description": "Date of ranking, if applicable",
            "format": "date-time",
            "nullable": true
          },
          "submittedDate": {
            "type": "string",
            "description": "Date of submission",
            "format": "date-time",
            "nullable": true
          },
          "creatorId": {
            "type": "integer",
            "description": "Id of the Player who created the set",
            "format": "int32"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The set creator",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a compact version of a beatmapset"
      },
      "BeatmapsetDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BeatmapsetCompactDTO"
          },
          {
            "type": "object",
            "properties": {
              "beatmaps": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                },
                "description": "Beatmaps which are part of this set"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "A beatmapset with beatmaps included"
      },
      "CreatedResultBaseDTO": {
        "required": [
          "id",
          "location"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the resource",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "Location of the resource"
          }
        },
        "additionalProperties": false,
        "description": "Represents a newly created resource"
      },
      "FilterReportDTO": {
        "required": [
          "created",
          "id",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the filter report",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The timestamp when the filter report was created",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "description": "The ID of the user who created the filter report",
            "format": "int32"
          },
          "request": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilteringRequestDTO"
              }
            ],
            "description": "The original filtering request",
            "nullable": true
          },
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilteringResultDTO"
              }
            ],
            "description": "The filtering results",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a complete filter report including metadata and results"
      },
      "FilteringFailReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "MinRating",
          "MaxRating",
          "NotEnoughTournaments",
          "PeakRatingTooHigh",
          "NotEnoughMatches",
          "TooManyMatches",
          "TooManyTournaments"
        ],
        "x-enumDescriptions": [
          "No failure reason",
          "The player's rating is below the minimum threshold",
          "The player's rating is above the maximum threshold",
          "The player has not played in the minimum specified\r\nnumber of tournaments",
          "The player's all-time peak rating is above the maximum threshold",
          "The player has not played in the minimum specified number of matches",
          "The player has played in more than the maximum specified number of matches",
          "The player has participated in more than the maximum specified number of tournaments"
        ]
      },
      "FilteringRequestDTO": {
        "required": [
          "osuPlayerIds",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "The ruleset by which data will be referenced, required"
          },
          "minRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating below this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "maxRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "Players with a current rating above this value will be filtered",
            "format": "int32",
            "nullable": true
          },
          "tournamentsPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have participated in at least\r\nthis many distinct tournaments",
            "format": "int32",
            "nullable": true
          },
          "peakRating": {
            "maximum": 2147483647,
            "minimum": 100,
            "type": "integer",
            "description": "If set, requires players to have an all-time peak rating less than\r\nthis value",
            "format": "int32",
            "nullable": true
          },
          "matchesPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have played in at least\r\nthis many matches",
            "format": "int32",
            "nullable": true
          },
          "maxMatchesPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have played in at most\r\nthis many matches",
            "format": "int32",
            "nullable": true
          },
          "maxTournamentsPlayed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "If set, requires players to have participated in at most\r\nthis many distinct tournaments",
            "format": "int32",
            "nullable": true
          },
          "osuPlayerIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of osu! player ids that will be filtered"
          }
        },
        "additionalProperties": false,
        "description": "Represents a set of criteria used by the API.Controllers.FilteringController\r\nto determine player eligibility for a tournament"
      },
      "FilteringResultDTO": {
        "required": [
          "filteringResults",
          "filterReportId",
          "playersFailed",
          "playersPassed"
        ],
        "type": "object",
        "properties": {
          "playersPassed": {
            "type": "integer",
            "description": "The number of players who passed filtering",
            "format": "int32"
          },
          "playersFailed": {
            "type": "integer",
            "description": "The number of players who failed filtering",
            "format": "int32"
          },
          "filteringResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFilteringResultDTO"
            },
            "description": "A collection of filtering results, one per submitted player,\r\nin the same order as submitted in the API.DTOs.FilteringRequestDTO"
          },
          "filterReportId": {
            "type": "integer",
            "description": "The ID of the filter report stored in the database",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a filtering result for a collection of players"
      },
      "GameCompactDTO": {
        "required": [
          "id",
          "osuId",
          "rejectionReason",
          "ruleset",
          "startTime",
          "verificationStatus",
          "warningFlags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "The ruleset"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status"
          },
          "warningFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameWarningFlags"
              }
            ],
            "description": "Warning flags"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameRejectionReason"
              }
            ],
            "description": "The rejection reason"
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp of the beginning of the game",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp of the end of the game",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents essential game information without nested data"
      },
      "GameDTO": {
        "required": [
          "adminNotes",
          "beatmap",
          "id",
          "isFreeMod",
          "mods",
          "osuId",
          "rejectionReason",
          "rosters",
          "ruleset",
          "scores",
          "scoringType",
          "startTime",
          "teamType",
          "verificationStatus",
          "warningFlags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "The ruleset"
          },
          "scoringType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoringType"
              }
            ],
            "description": "The scoring type used"
          },
          "teamType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamType"
              }
            ],
            "description": "The team type used"
          },
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "The mods enabled"
          },
          "isFreeMod": {
            "type": "boolean",
            "description": "Denotes if the mod setting is \"free mod\""
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The verification status"
          },
          "warningFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameWarningFlags"
              }
            ],
            "description": "Warning flags"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GameRejectionReason"
              }
            ],
            "description": "The rejection reason"
          },
          "startTime": {
            "type": "string",
            "description": "Timestamp of the beginning of the game",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Timestamp of the end of the game",
            "format": "date-time",
            "nullable": true
          },
          "beatmap": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BeatmapDTO"
              }
            ],
            "description": "The beatmap played"
          },
          "rosters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameRosterDTO"
            },
            "description": "Win record"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          },
          "scores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameScoreDTO"
            },
            "description": "All match scores"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single game (osu! beatmap) played in a match"
      },
      "GameRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoScores",
          "InvalidMods",
          "RulesetMismatch",
          "InvalidScoringType",
          "InvalidTeamType",
          "FailedTeamVsConversion",
          "NoValidScores",
          "LobbySizeMismatch",
          "NoEndTime",
          "RejectedMatch",
          "BeatmapNotPooled"
        ],
        "x-enumDescriptions": [
          "The !:Database.Entities.Game is not rejected",
          "The !:Database.Entities.Game's osu! API data did not contain any !:Database.Entities.GameScores",
          "The !:Database.Entities.Game has invalid mods applied",
          "The !:Database.Entities.Game's Common.Enums.Ruleset does not match that of the parent !:Database.Entities.Tournament",
          "The !:Database.Entities.Game's Common.Enums.ScoringType is not Common.Enums.ScoringType.ScoreV2",
          "The !:Database.Entities.Game's Common.Enums.TeamType is not Common.Enums.TeamType.TeamVs",
          "The !:Database.Entities.Game's Common.Enums.TeamType is not Common.Enums.TeamType.TeamVs\r\nand attempting Common.Enums.TeamType.TeamVs conversion was not successful",
          "The !:Database.Entities.Game's number of !:Database.Entities.Game.Scores with a Common.Enums.Verification.VerificationStatus\r\nof Common.Enums.Verification.VerificationStatus.Verified or Common.Enums.Verification.VerificationStatus.PreVerified is < 2",
          "The !:Database.Entities.Game's number of !:Database.Entities.Game.Scores with a Common.Enums.Verification.VerificationStatus\r\nof Common.Enums.Verification.VerificationStatus.Verified or Common.Enums.Verification.VerificationStatus.PreVerified divided by 2 is\r\nnot equal to the !:Database.Entities.Tournament.LobbySize of the parent !:Database.Entities.Tournament\r\nin case of Common.Enums.TeamType.HeadToHead!:Database.Entities.Games.\r\nIn the case of 2 or more teams, ensures that there are an equal number of players in the lobby for each team.",
          "The !:Database.Entities.Game's !:Database.Entities.Game.EndTime could not be determined",
          "The System.Text.RegularExpressions.Match the !:Database.Entities.Game was played in was rejected",
          "The !:Database.Entities.Tournament has a known collection of PooledBeatmaps\r\nand the !:Database.Entities.Beatmap played in the !:Database.Entities.Game is not present\r\nin said collection"
        ]
      },
      "GameRosterDTO": {
        "required": [
          "gameId",
          "roster",
          "score",
          "team"
        ],
        "type": "object",
        "properties": {
          "gameId": {
            "type": "integer",
            "description": "Id of the game",
            "format": "int32"
          },
          "team": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Team"
              }
            ],
            "description": "Winning team"
          },
          "score": {
            "type": "integer",
            "description": "Combined score of the losing team",
            "format": "int32"
          },
          "roster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of all players on the losing team"
          }
        },
        "additionalProperties": false,
        "description": "Represents aggregate statistics and roster for both teams in a game"
      },
      "GameScoreDTO": {
        "required": [
          "accuracy",
          "adminNotes",
          "count100",
          "count300",
          "count50",
          "countGeki",
          "countKatu",
          "countMiss",
          "grade",
          "id",
          "maxCombo",
          "mods",
          "placement",
          "playerId",
          "rejectionReason",
          "ruleset",
          "score",
          "team",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "playerId": {
            "type": "integer",
            "description": "Id of the Player that set the score",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset the score was set in"
          },
          "team": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Team"
              }
            ],
            "description": "Team the Player was on"
          },
          "grade": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoreGrade"
              }
            ],
            "description": "Letter grade"
          },
          "score": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Total score",
            "format": "int32"
          },
          "placement": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Placement of the score compared to all others in the same game",
            "format": "int32"
          },
          "maxCombo": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Max combo",
            "format": "int32"
          },
          "count50": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of notes hit with a judgement of 50",
            "format": "int32"
          },
          "count100": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of notes hit with a judgement of 100",
            "format": "int32"
          },
          "count300": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of notes hit with a judgement of 300",
            "format": "int32"
          },
          "countKatu": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of notes hit with a judgement of Katu",
            "format": "int32"
          },
          "countGeki": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of notes hit with a judgement of Geki",
            "format": "int32"
          },
          "countMiss": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Count of missed notes",
            "format": "int32"
          },
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "Applied mods"
          },
          "accuracy": {
            "type": "number",
            "description": "Accuracy",
            "format": "double"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The current state of verification"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScoreRejectionReason"
              }
            ],
            "description": "The rejection reason"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single score set in a game"
      },
      "GameWarningFlags": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "BeatmapUsedOnce"
        ],
        "x-enumDescriptions": [
          "The !:Database.Entities.Game has no warnings",
          "If the parent !:Database.Entities.Tournament does not have a submitted pool of\r\n!:Database.Entities.Beatmaps, and the !:Database.Entities.Game's !:Database.Entities.Game.Beatmap\r\nis played only once throughout the entire !:Database.Entities.Tournament"
        ]
      },
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": { }
          }
        ]
      },
      "LeaderboardDTO": {
        "required": [
          "leaderboard",
          "pages",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "pages": {
            "type": "integer",
            "description": "The maximum page count for which there will be results",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ]
          },
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerRatingStatsDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "MatchCompactDTO": {
        "required": [
          "adminNotes",
          "games",
          "id",
          "name",
          "osuId",
          "rejectionReason",
          "ruleset",
          "verificationStatus",
          "warningFlags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Title of the lobby"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset"
          },
          "startTime": {
            "type": "string",
            "description": "Start time",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "description": "End time",
            "format": "date-time",
            "nullable": true
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "Verification status"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchRejectionReason"
              }
            ],
            "description": "Rejection reason"
          },
          "warningFlags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchWarningFlags"
              }
            ],
            "description": "Warning flags"
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameCompactDTO"
            },
            "description": "Games played in this match"
          },
          "adminNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminNoteDTO"
            },
            "description": "All associated admin notes"
          }
        },
        "additionalProperties": false
      },
      "MatchCreatedResultDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreatedResultBaseDTO"
          },
          {
            "type": "object",
            "properties": {
              "osuId": {
                "type": "integer",
                "description": "osu! match id",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Represents a created match"
      },
      "MatchDTO": {
        "properties": {
          "tournament": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentCompactDTO"
              }
            ],
            "description": "The API.DTOs.TournamentCompactDTO this match was played in"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerCompactDTO"
            },
            "description": "The participating Database.Entities.Players"
          },
          "playerMatchStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerMatchStatsDTO"
            },
            "description": "Match stats for each participant"
          },
          "ratingAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingAdjustmentDTO"
            },
            "description": "Rating adjustments for each participant"
          },
          "matchWinRecord": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchWinRecordDTO"
              }
            ],
            "description": "Match win record information (Generated by the o!TR Processor)",
            "nullable": true
          },
          "rosters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchRosterDTO"
            },
            "description": "Roster information for teams in this match"
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameDTO"
            },
            "description": "List of games played during the match"
          }
        },
        "description": "Represents a played match"
      },
      "MatchQuerySortType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Id",
          "OsuId",
          "StartTime",
          "EndTime",
          "Created"
        ],
        "x-enumDescriptions": [
          "Sort by primary key",
          "Sort by osu! id",
          "Sort by start time",
          "Sort by end time",
          "Sort by creation date"
        ]
      },
      "MatchRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoData",
          "NoGames",
          "NamePrefixMismatch",
          "FailedTeamVsConversion",
          "NoValidGames",
          "UnexpectedGameCount",
          "NoEndTime",
          "RejectedTournament"
        ],
        "x-enumDescriptions": [
          "The System.Text.RegularExpressions.Match is not rejected",
          "The osu! API returned invalid data or no data for the System.Text.RegularExpressions.Match",
          "The osu! API returned no !:Database.Entities.Games for the System.Text.RegularExpressions.Match",
          "The System.Text.RegularExpressions.Match's !:Match.Name does not start with the\r\nparent !:Database.Entities.Tournament's !:Database.Entities.Tournament.Abbreviation",
          "The System.Text.RegularExpressions.Match's !:Entities.Games were eligible for Common.Enums.TeamType.TeamVs\r\nconversion and attempting Common.Enums.TeamType.TeamVs conversion was not successful",
          "The System.Text.RegularExpressions.Match has no !:Match.Games with a Common.Enums.Verification.VerificationStatus\r\nof Common.Enums.Verification.VerificationStatus.Verified or Common.Enums.Verification.VerificationStatus.PreVerified",
          "The System.Text.RegularExpressions.Match's number of !:Match.Games with a Common.Enums.Verification.VerificationStatus\r\nof Common.Enums.Verification.VerificationStatus.Verified or Common.Enums.Verification.VerificationStatus.PreVerified is not an odd number\r\n(does not satisfy \"best of X\")",
          "The System.Text.RegularExpressions.Match's !:Match.EndTime could not be determined",
          "The !:Database.Entities.Tournament the System.Text.RegularExpressions.Match was played in was rejected"
        ]
      },
      "MatchRosterDTO": {
        "required": [
          "id",
          "matchId",
          "roster",
          "score",
          "team"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "roster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Player IDs for this roster"
          },
          "team": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Team"
              }
            ],
            "description": "The team designation"
          },
          "score": {
            "type": "integer",
            "description": "The total score for this roster",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "Id of the match this roster belongs to",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents roster information for teams in a match"
      },
      "MatchSearchResultDTO": {
        "required": [
          "id",
          "name",
          "osuId",
          "tournamentName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of the match"
          },
          "tournamentName": {
            "type": "string",
            "description": "Name of the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a match"
      },
      "MatchSubmissionStatusDTO": {
        "required": [
          "created",
          "id",
          "osuId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the match",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! match id of the match",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Lobby title of the match",
            "nullable": true
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "Current verification status of the match",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Date that the match was submitted",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "Date that the match was last updated",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the status of a submitted match"
      },
      "MatchWarningFlags": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "UnexpectedNameFormat",
          "LowGameCount",
          "UnexpectedBeatmapsFound",
          "OverlappingRosters"
        ],
        "x-enumDescriptions": [
          "The System.Text.RegularExpressions.Match has no warnings",
          "The System.Text.RegularExpressions.Match's !:Match.Name does not follow common tournament\r\nlobby title conventions",
          "The System.Text.RegularExpressions.Match's number of !:Match.Games is exactly 3 or 4",
          "The System.Text.RegularExpressions.Match has 1 or more !:Database.Entities.Games with a Common.Enums.Verification.GameRejectionReason\r\nof Common.Enums.Verification.GameRejectionReason.BeatmapNotPooled outside of the first two !:Database.Entities.Games",
          "At least one !:Database.Entities.Player appears in two or more rosters in a System.Text.RegularExpressions.Match"
        ]
      },
      "MatchWinRecordDTO": {
        "required": [
          "isTied",
          "loserPoints",
          "matchId",
          "winnerPoints"
        ],
        "type": "object",
        "properties": {
          "matchId": {
            "type": "integer",
            "description": "The id of the match",
            "format": "int32"
          },
          "isTied": {
            "type": "boolean",
            "description": "Indicates whether the match ended in a tie"
          },
          "loserRoster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of each player on the losing team. Null if tied.",
            "nullable": true
          },
          "winnerRoster": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of each player on the winning team. Null if tied.",
            "nullable": true
          },
          "loserPoints": {
            "type": "integer",
            "description": "The number of points the losing team earned",
            "format": "int32"
          },
          "winnerPoints": {
            "type": "integer",
            "description": "The number of points the winning team earned",
            "format": "int32"
          },
          "winnerTeam": {
            "type": "integer",
            "description": "The winning team (see Common.Enums.Team). Null if HeadToHead or tied.",
            "format": "int32",
            "nullable": true
          },
          "loserTeam": {
            "type": "integer",
            "description": "The losing team (see Common.Enums.Team). Null if HeadToHead or tied.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of who won and lost a match (Generated by the o!TR Processor)"
      },
      "MessagePriority": {
        "enum": [
          0,
          5,
          10
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Low",
          "Normal",
          "High"
        ],
        "x-enumDescriptions": [
          "Low priority messages (processed after Normal and High)",
          "Normal priority messages (default priority level)",
          "High priority messages (processed first)"
        ]
      },
      "Mods": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          22688,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576,
          1049688,
          2097152,
          4194304,
          8388608,
          16777216,
          33554432,
          67108864,
          134217728,
          268435456,
          521109504,
          522171579,
          536870912,
          1073741824
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoFail",
          "Easy",
          "TouchDevice",
          "Hidden",
          "HardRock",
          "SuddenDeath",
          "DoubleTime",
          "Relax",
          "HalfTime",
          "Nightcore",
          "Flashlight",
          "Autoplay",
          "SpunOut",
          "Relax2",
          "Perfect",
          "InvalidMods",
          "Key4",
          "Key5",
          "Key6",
          "Key7",
          "Key8",
          "FadeIn",
          "ScoreIncreaseMods",
          "Random",
          "Cinema",
          "Target",
          "Key9",
          "KeyCoop",
          "Key1",
          "Key3",
          "Key2",
          "KeyMod",
          "FreeModAllowed",
          "ScoreV2",
          "Mirror"
        ],
        "x-enumDescriptions": [
          "No mods enabled",
          "No fail (NF)",
          "Easy (EZ)",
          "Touch Device (TD)",
          "Hidden (HD)",
          "Hard Rock (HR)",
          "Sudden Death (SD)",
          "Double Time (DT)",
          "Relax (RX)",
          "Half Time (HT)",
          "Nightcore (NC)\n\nOnly set along with DoubleTime. i.e: NC only gives 576",
          "Flashlight (FL)",
          "Autoplay (AT)",
          "Spun Out (SO)",
          "Autopilot (AP)\n\nAutopilot",
          "Perfect (PF)\n\nOnly set along with Common.Enums.Mods.SuddenDeath. i.e: PF only gives 16416",
          "4 key (4K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "5 key (5K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "6 key (6K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "7 key (7K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "8 key (8K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Fade In (FI)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Random (RD)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Cinema (CM)",
          "Target Practice (TP)",
          "9 Key (9K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Co-op (CO)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "1 Key (1K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "3 Key (3K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "2 Key (2K)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Score v2 (SV2)",
          "Mirror (MR)\n\nApplicable only to Common.Enums.Ruleset.ManiaOther",
          "Denotes mods that are Common.Enums.Ruleset.ManiaOther key modifiers\n\nSee https://osu.ppy.sh/wiki/en/Gameplay/Game_modifier/xK",
          "Denotes mods that are available to use during Free Mod settings",
          "Denotes mods that directly impose a modifier on score",
          "Denotes mods that are ineligible for ratings"
        ]
      },
      "OAuthClientCreatedDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAuthClientDTO"
          },
          {
            "type": "object",
            "properties": {
              "clientSecret": {
                "type": "string",
                "description": "Client secret of the client"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Represents a created OAuth client (The only time the client secret is available is when a new client is created)"
      },
      "OAuthClientDTO": {
        "required": [
          "clientId",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "description": "Client id of the client",
            "format": "int32"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions granted to the client"
          },
          "rateLimitOverride": {
            "type": "integer",
            "description": "Possible rate limit override for the client",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an OAuth client"
      },
      "Operation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OperationBase": {
        "required": [
          "operationType"
        ],
        "type": "object",
        "properties": {
          "operationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OperationType"
              }
            ],
            "readOnly": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ]
      },
      "Operation`1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Operation"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PlatformStatsDTO": {
        "required": [
          "ratingStats",
          "tournamentStats",
          "userStats"
        ],
        "type": "object",
        "properties": {
          "tournamentStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentPlatformStatsDTO"
              }
            ],
            "description": "Platform-wide tournament stats"
          },
          "ratingStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RatingPlatformStatsDTO"
              }
            ],
            "description": "Platform-wide rating stats"
          },
          "userStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserPlatformStatsDTO"
              }
            ],
            "description": "Platform-wide user stats"
          }
        },
        "additionalProperties": false,
        "description": "Represents platform-wide statistics"
      },
      "PlayerCompactDTO": {
        "required": [
          "country",
          "defaultRuleset",
          "id",
          "osuId",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "osu! username"
          },
          "country": {
            "type": "string",
            "description": "osu! country code"
          },
          "defaultRuleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "The player's primary osu! ruleset"
          },
          "userId": {
            "type": "integer",
            "description": "Id of the associated user, if available",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents player information"
      },
      "PlayerDashboardStatsDTO": {
        "required": [
          "playerInfo",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "playerInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "Player info"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset the statistics were calculated for"
          },
          "rating": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerRatingStatsDTO"
              }
            ],
            "description": "Base stats for the player (If filtered by time, all fields in this class will change.)",
            "nullable": true
          },
          "matchStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AggregatePlayerMatchStatsDTO"
              }
            ],
            "description": "Match stats for the player",
            "nullable": true
          },
          "modStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerModStatsDTO"
            },
            "description": "Mod stats for the player",
            "nullable": true
          },
          "tournamentPerformanceStats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerTournamentPerformanceDTO"
              }
            ],
            "description": "Tournament participation and performance stats for the player",
            "nullable": true
          },
          "frequentTeammates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's teammates",
            "nullable": true
          },
          "frequentOpponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerFrequencyDTO"
            },
            "description": "List of frequencies of the player's opponents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of statistics for a player in a ruleset"
      },
      "PlayerFilteringResultDTO": {
        "required": [
          "isSuccess",
          "osuId"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player, if found",
            "format": "int32",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The username of the player, if found",
            "nullable": true
          },
          "osuId": {
            "type": "integer",
            "description": "The osu! id of the player",
            "format": "int64"
          },
          "isSuccess": {
            "type": "boolean",
            "description": "Whether the player successfully passes all conditions of the filter",
            "readOnly": true
          },
          "failureReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilteringFailReason"
              }
            ],
            "description": "If the player failed filtering, the fail reason",
            "nullable": true
          },
          "currentRating": {
            "type": "number",
            "description": "The player's current rating for the requested ruleset",
            "format": "double",
            "nullable": true
          },
          "tournamentsPlayed": {
            "type": "integer",
            "description": "The number of tournaments the player has participated in",
            "format": "int32",
            "nullable": true
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "The number of matches the player has played",
            "format": "int32",
            "nullable": true
          },
          "peakRating": {
            "type": "number",
            "description": "The player's all-time peak rating for the requested ruleset",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one player's filtering result"
      },
      "PlayerFrequencyDTO": {
        "required": [
          "frequency",
          "player"
        ],
        "type": "object",
        "properties": {
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The player"
          },
          "frequency": {
            "type": "integer",
            "description": "Number of times this teammate or opponent has played with the player",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a player in the context of a teammate or opponent of another player"
      },
      "PlayerMatchStatsDTO": {
        "required": [
          "averageAccuracy",
          "averageMisses",
          "averagePlacement",
          "averageScore",
          "gamesLost",
          "gamesPlayed",
          "gamesWon",
          "matchId",
          "opponentIds",
          "playerId",
          "teammateIds",
          "won"
        ],
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "The id of the player",
            "format": "int32"
          },
          "matchId": {
            "type": "integer",
            "description": "The id of the match",
            "format": "int32"
          },
          "won": {
            "type": "boolean",
            "description": "Whether the player (or their team) won this match"
          },
          "averageScore": {
            "type": "number",
            "description": "The player's average score in this match",
            "format": "double"
          },
          "averageMisses": {
            "type": "number",
            "description": "The player's average misses in this match",
            "format": "double"
          },
          "averageAccuracy": {
            "type": "number",
            "description": "The player's average accuracy in this match",
            "format": "double"
          },
          "averagePlacement": {
            "type": "number",
            "description": "The player's average placement in this match",
            "format": "double"
          },
          "gamesWon": {
            "type": "integer",
            "description": "The number of games the player (or their team) won in the match. (The player must have participated in the game for this to count.\r\nIf they were on the same team as the winner, but not in the lobby,\r\nthis will not count towards the total.)",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "The number of games the player (or their team) lost in the match. (The player must have participated in the game for this to count.\r\nIf they were on the same team as the loser, but not in the lobby,\r\nthis will not count towards the total.)",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "The total number of games the player participated in during this match",
            "format": "int32"
          },
          "teammateIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "opponentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A unique list of player ids that were on the opposing team as the player in this match. (In a 1v1, this would only contain the opponent's id.)"
          }
        },
        "additionalProperties": false,
        "description": "Represents a player's match stats"
      },
      "PlayerModStatsDTO": {
        "required": [
          "averageScore",
          "count",
          "mods"
        ],
        "type": "object",
        "properties": {
          "mods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Mods"
              }
            ],
            "description": "The combination of mods used"
          },
          "count": {
            "type": "integer",
            "description": "The number of times the player participated with this mod combination",
            "format": "int32"
          },
          "averageScore": {
            "type": "integer",
            "description": "The average score achieved by the player with this mod combination.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in games of differing mod combinations"
      },
      "PlayerRatingDTO": {
        "required": [
          "countryRank",
          "globalRank",
          "percentile",
          "player",
          "rating",
          "ruleset",
          "volatility"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset"
          },
          "rating": {
            "type": "number",
            "description": "Rating",
            "format": "double"
          },
          "volatility": {
            "type": "number",
            "description": "Rating volatility",
            "format": "double"
          },
          "percentile": {
            "type": "number",
            "description": "Global rating percentile",
            "format": "double"
          },
          "globalRank": {
            "type": "integer",
            "description": "Global rank",
            "format": "int32"
          },
          "countryRank": {
            "type": "integer",
            "description": "Country rank",
            "format": "int32"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The player"
          }
        },
        "additionalProperties": false,
        "description": "Describes tournament rating based information for a player in a ruleset that are current and not time specific"
      },
      "PlayerRatingStatsDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlayerRatingDTO"
          },
          {
            "required": [
              "tierProgress"
            ],
            "type": "object",
            "properties": {
              "tournamentsPlayed": {
                "type": "integer",
                "description": "Total number of tournaments played",
                "format": "int32"
              },
              "matchesPlayed": {
                "type": "integer",
                "description": "Total number of matches played",
                "format": "int32"
              },
              "winRate": {
                "type": "number",
                "description": "Match win rate",
                "format": "double"
              },
              "tierProgress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TierProgressDTO"
                  }
                ],
                "description": "Rating tier progress information"
              },
              "adjustments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingAdjustmentDTO"
                },
                "description": "A collection of adjustments that describe the changes resulting in the final rating"
              },
              "isProvisional": {
                "type": "boolean",
                "description": "Denotes the current rating as being provisional",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Describes tournament rating based information for a player in a ruleset with additional statistics (If filtered by time, all fields in this class will change.)"
      },
      "PlayerSearchResultDTO": {
        "required": [
          "id",
          "isFriend",
          "osuId",
          "thumbnail"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the player",
            "format": "int32"
          },
          "osuId": {
            "type": "integer",
            "description": "osu! id of the player",
            "format": "int64"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the player for the given ruleset",
            "format": "double",
            "nullable": true
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset of the player's rating",
            "nullable": true
          },
          "globalRank": {
            "type": "integer",
            "description": "Current global rank of the player for the given ruleset",
            "format": "int32",
            "nullable": true
          },
          "tierProgress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TierProgressDTO"
              }
            ],
            "description": "Current rating tier of the player for the given ruleset",
            "nullable": true,
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "osu! username of the player",
            "nullable": true
          },
          "thumbnail": {
            "type": "string",
            "description": "Link to an osu! thumbnail for the player"
          },
          "isFriend": {
            "type": "boolean",
            "description": "Denotes the player is a friend of the requesting user"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a player for a given ruleset"
      },
      "PlayerTournamentLobbySizeCountDTO": {
        "type": "object",
        "properties": {
          "count1v1": {
            "type": "integer",
            "description": "Number of 1v1 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count2v2": {
            "type": "integer",
            "description": "Number of 2v2 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count3v3": {
            "type": "integer",
            "description": "Number of 3v3 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "count4v4": {
            "type": "integer",
            "description": "Number of 4v4 tournaments played",
            "format": "int32",
            "nullable": true
          },
          "countOther": {
            "type": "integer",
            "description": "Number of tournaments played outside of standard team sizes",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents counts of participation in tournaments of differing team sizes"
      },
      "PlayerTournamentPerformanceDTO": {
        "required": [
          "bestPerformances",
          "lobbySizeCounts",
          "recentPerformances"
        ],
        "type": "object",
        "properties": {
          "lobbySizeCounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerTournamentLobbySizeCountDTO"
              }
            ],
            "description": "Counts of participation in tournaments of differing team sizes for the player"
          },
          "bestPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentStatsDTO"
            },
            "description": "List of best tournament performances for the player"
          },
          "recentPerformances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerTournamentStatsDTO"
            },
            "description": "List of recent tournament performances for the player"
          }
        },
        "additionalProperties": false,
        "description": "Represents statistics for a player regarding tournament participation and performance"
      },
      "PlayerTournamentStatsBaseDTO": {
        "required": [
          "averageAccuracy",
          "averageMatchCost",
          "averagePlacement",
          "averageRatingDelta",
          "averageScore",
          "gamesLost",
          "gamesPlayed",
          "gamesWon",
          "matchesLost",
          "matchesPlayed",
          "matchesWon",
          "player"
        ],
        "type": "object",
        "properties": {
          "averageRatingDelta": {
            "type": "number",
            "description": "Average change in rating",
            "format": "double"
          },
          "averageMatchCost": {
            "type": "number",
            "description": "Average match cost",
            "format": "double"
          },
          "averageScore": {
            "type": "integer",
            "description": "Average score",
            "format": "int32"
          },
          "averagePlacement": {
            "type": "number",
            "description": "Average placement",
            "format": "double"
          },
          "averageAccuracy": {
            "type": "number",
            "description": "Average accuracy",
            "format": "double"
          },
          "matchesPlayed": {
            "type": "integer",
            "description": "Total number of Database.Entities.Matches played",
            "format": "int32"
          },
          "matchesWon": {
            "type": "integer",
            "description": "Total number of Database.Entities.Matches won",
            "format": "int32"
          },
          "matchesLost": {
            "type": "integer",
            "description": "Total number of Database.Entities.Matches lost",
            "format": "int32"
          },
          "gamesPlayed": {
            "type": "integer",
            "description": "Total number of Database.Entities.Games played",
            "format": "int32"
          },
          "gamesWon": {
            "type": "integer",
            "description": "Total number of Database.Entities.Games won",
            "format": "int32"
          },
          "gamesLost": {
            "type": "integer",
            "description": "Total number of Database.Entities.Games lost",
            "format": "int32"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The player who owns these stats"
          }
        },
        "additionalProperties": false
      },
      "PlayerTournamentStatsDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlayerTournamentStatsBaseDTO"
          },
          {
            "type": "object",
            "properties": {
              "tournament": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TournamentCompactDTO"
                  }
                ],
                "description": "The tournament that these stats are for"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "QueueResponseDTO": {
        "required": [
          "correlationId",
          "priority"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Unique identifier for tracking the queued operation",
            "format": "uuid"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePriority"
              }
            ],
            "description": "Priority level of the request in the message queue"
          }
        },
        "additionalProperties": false,
        "description": "Response data for asynchronous queue operations"
      },
      "RatingAdjustmentDTO": {
        "required": [
          "adjustmentType",
          "ratingAfter",
          "ratingBefore",
          "ratingDelta",
          "timestamp",
          "volatilityAfter",
          "volatilityBefore",
          "volatilityDelta"
        ],
        "type": "object",
        "properties": {
          "adjustmentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RatingAdjustmentType"
              }
            ],
            "description": "The type of event that caused the adjustment"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of when the adjustment was applied",
            "format": "date-time"
          },
          "ratingBefore": {
            "type": "number",
            "description": "Rating before the adjustment",
            "format": "double"
          },
          "ratingAfter": {
            "type": "number",
            "description": "Rating after the adjustment",
            "format": "double"
          },
          "ratingDelta": {
            "type": "number",
            "description": "Total change in rating",
            "format": "double"
          },
          "volatilityBefore": {
            "type": "number",
            "description": "Rating volatility before the adjustment",
            "format": "double"
          },
          "volatilityAfter": {
            "type": "number",
            "description": "Rating volatility after the adjustment",
            "format": "double"
          },
          "volatilityDelta": {
            "type": "number",
            "description": "Total change in rating volatility",
            "format": "double"
          },
          "match": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchCompactDTO"
              }
            ],
            "description": "Id of the match the adjustment was created for if available",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a single change to a PlayerRating"
      },
      "RatingAdjustmentType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Initial",
          "Decay",
          "Match"
        ],
        "x-enumDescriptions": [
          "The !:Database.Entities.Processor.RatingAdjustment is the initial rating",
          "The !:Database.Entities.Processor.RatingAdjustment is the result of a period of inactivity (decay)",
          "The !:Database.Entities.Processor.RatingAdjustment is the result of participation in a System.Text.RegularExpressions.Match"
        ]
      },
      "RatingPlatformStatsDTO": {
        "required": [
          "ratingsByRuleset"
        ],
        "type": "object",
        "properties": {
          "ratingsByRuleset": {
            "required": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "type": "object",
            "properties": {
              "Osu": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Taiko": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Catch": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "ManiaOther": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Mania4k": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Mania7k": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "additionalProperties": false,
            "description": "For each ruleset, a map of rating 'buckets' (i.e. 100, 125, 150, etc. rating)s\r\nto the number of Database.Entities.Players in that 'bucket'"
          }
        },
        "additionalProperties": false,
        "description": "Represents platform-wide Database.Entities.Processor.PlayerRating stats"
      },
      "Roles": {
        "enum": [
          "user",
          "client",
          "admin",
          "verifier",
          "submit",
          "whitelist"
        ],
        "type": "string",
        "description": "The possible roles assignable to a user or client",
        "x-enumNames": [
          "User",
          "Client",
          "Admin",
          "Verifier",
          "Submit",
          "Whitelist"
        ],
        "x-enumDescriptions": [
          "Role granted to all users.",
          "Role granted to all clients.",
          "Role granted to privileged users.",
          "Role granted to users with permission to verify submission data.",
          "Role granted to users with permission to submit tournament data.",
          "Role granted to users and clients to allow access during times of restricted use."
        ]
      },
      "Ruleset": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Osu",
          "Taiko",
          "Catch",
          "ManiaOther",
          "Mania4k",
          "Mania7k"
        ],
        "x-enumDescriptions": [
          "osu! (standard)",
          "osu! Taiko",
          "osu! Catch (aka Fruits)",
          "osu! Mania\n\nEncompasses all of the osu!mania ruleset and represents a ruleset that has\r\nnot yet been identified as either Common.Enums.Ruleset.Mania4k or Common.Enums.Ruleset.Mania7k",
          "osu! Mania 4k variant",
          "osu! Mania 7k variant"
        ]
      },
      "ScoreGrade": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "SSH",
          "SH",
          "SS",
          "S",
          "A",
          "B",
          "C",
          "D"
        ],
        "x-enumDescriptions": [
          "100% accuracy with Common.Enums.Mods.Hidden and/or Common.Enums.Mods.Flashlight",
          "Over 90% 300s, less than 1% 50s and no misses with Common.Enums.Mods.Hidden and/or Common.Enums.Mods.Flashlight",
          "100% accuracy",
          "Over 90% 300s, less than 1% 50s and no misses",
          "Over 80% 300s and no misses OR over 90% 300s",
          "Over 70% 300s and no misses OR over 80% 300s",
          "Over 60% 300s",
          "Anything else"
        ]
      },
      "ScoreRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "ScoreBelowMinimum",
          "InvalidMods",
          "RulesetMismatch",
          "RejectedGame"
        ],
        "x-enumDescriptions": [
          "The !:Database.Entities.GameScore is not rejected",
          "The !:Database.Entities.GameScore's !:Database.Entities.GameScore.Score is below the minimum threshold",
          "The !:Database.Entities.GameScore was set with any Common.Enums.Mods.InvalidMods",
          "The !:Database.Entities.GameScore's Common.Enums.Ruleset does not match that of the parent !:Database.Entities.Tournament",
          "The !:Database.Entities.Game the !:Database.Entities.GameScore was set in was rejected"
        ]
      },
      "ScoringType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Score",
          "Accuracy",
          "Combo",
          "ScoreV2"
        ],
        "x-enumDescriptions": [
          "Scoring based on Score v1",
          "Scoring based on accuracy",
          "Scoring based on combo",
          "Scoring based on Score v2"
        ]
      },
      "SearchResponseCollectionDTO": {
        "required": [
          "matches",
          "players",
          "tournaments"
        ],
        "type": "object",
        "properties": {
          "tournaments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TournamentSearchResultDTO"
            },
            "description": "A collection of search results for tournaments matching the search query"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchSearchResultDTO"
            },
            "description": "A collection of search results for matches matching the search query"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSearchResultDTO"
            },
            "description": "A collection of search results for players matching the search query"
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of search results"
      },
      "Team": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "NoTeam",
          "Blue",
          "Red"
        ],
        "x-enumDescriptions": [
          "No team",
          "Team blue",
          "Team red"
        ]
      },
      "TeamType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "HeadToHead",
          "TagCoop",
          "TeamVs",
          "TagTeamVs"
        ],
        "x-enumDescriptions": [
          "Free for all",
          "Free for all (Tag format)\n\nAll players play tag on the same beatmap",
          "Team red vs team blue",
          "Team red vs team blue (Tag format)"
        ]
      },
      "TierProgressDTO": {
        "required": [
          "currentTier",
          "ratingForNextMajorTier",
          "ratingForNextTier"
        ],
        "type": "object",
        "properties": {
          "currentTier": {
            "type": "string",
            "description": "Current tier"
          },
          "currentSubTier": {
            "type": "integer",
            "description": "Current sub tier",
            "format": "int32",
            "nullable": true
          },
          "nextTier": {
            "type": "string",
            "description": "Name of the next major tier (Null if there is no next major tier, e.g. when the rating value is within the maximum tier)",
            "nullable": true
          },
          "nextSubTier": {
            "type": "integer",
            "description": "Next sub tier",
            "format": "int32",
            "nullable": true
          },
          "ratingForNextTier": {
            "type": "number",
            "description": "Rating required to reach next sub tier",
            "format": "double"
          },
          "ratingForNextMajorTier": {
            "type": "number",
            "description": "Rating required to reach next major tier",
            "format": "double"
          },
          "nextMajorTier": {
            "type": "string",
            "description": "Major tier following current major tier",
            "nullable": true
          },
          "subTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next sub tier as a percentage",
            "format": "double",
            "nullable": true
          },
          "majorTierFillPercentage": {
            "type": "number",
            "description": "Progress to the next major tier as a percentage",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents rating tier progress data"
      },
      "TournamentCompactDTO": {
        "required": [
          "abbreviation",
          "created",
          "endTime",
          "forumUrl",
          "id",
          "lobbySize",
          "name",
          "rankRangeLowerBound",
          "rejectionReason",
          "ruleset",
          "startTime",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of submission",
            "format": "date-time"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Full name"
          },
          "abbreviation": {
            "minLength": 1,
            "type": "string"
          },
          "forumUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The osu! forum post or wiki page this tournament is featured by (If both are present, the osu! forum post should be used)"
          },
          "rankRangeLowerBound": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lowest rank a player can be to participate",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset in which all matches are played"
          },
          "lobbySize": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "description": "The start date of the first match",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The end date of the last match",
            "format": "date-time"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "The state of verification"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentRejectionReason"
              }
            ],
            "description": "The rejection reason"
          },
          "submittedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The user that submitted the tournament",
            "nullable": true
          },
          "verifiedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCompactDTO"
              }
            ],
            "description": "The user that verified the tournament",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a tournament with minimal data"
      },
      "TournamentCreatedResultDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreatedResultBaseDTO"
          },
          {
            "required": [
              "abbreviation",
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tournament"
              },
              "abbreviation": {
                "type": "string",
                "description": "Acronym / shortened name of the tournament\r\n<example>For osu! World Cup 2023, this value would be \"OWC23\"</example>"
              },
              "matches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchCreatedResultDTO"
                },
                "description": "List of created matches"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Represents a created tournament"
      },
      "TournamentDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TournamentCompactDTO"
          },
          {
            "type": "object",
            "properties": {
              "matches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchCompactDTO"
                },
                "description": "All associated match data (Will be empty for bulk requests such as List)"
              },
              "adminNotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminNoteDTO"
                },
                "description": "All admin notes associated with the tournament"
              },
              "playerTournamentStats": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerTournamentStatsBaseDTO"
                },
                "description": "All player tournament stats associated with the tournament"
              },
              "pooledBeatmaps": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BeatmapDTO"
                },
                "description": "All beatmaps pooled for this tournament"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Represents a tournament including optional data"
      },
      "TournamentPlatformStatsDTO": {
        "required": [
          "countByVerificationStatus",
          "totalCount",
          "verifiedByLobbySize",
          "verifiedByRuleset",
          "verifiedByYear"
        ],
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of Database.Entities.Tournaments",
            "format": "int32"
          },
          "countByVerificationStatus": {
            "required": [
              "None",
              "PreRejected",
              "PreVerified",
              "Rejected",
              "Verified"
            ],
            "type": "object",
            "properties": {
              "None": {
                "type": "integer",
                "format": "int32"
              },
              "PreRejected": {
                "type": "integer",
                "format": "int32"
              },
              "PreVerified": {
                "type": "integer",
                "format": "int32"
              },
              "Rejected": {
                "type": "integer",
                "format": "int32"
              },
              "Verified": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "description": "Map of Common.Enums.Verification.VerificationStatuses to the number of Database.Entities.Tournaments with the status"
          },
          "verifiedByYear": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Map of years to the number of verified Database.Entities.Tournaments in that year"
          },
          "verifiedByRuleset": {
            "required": [
              "Osu",
              "Taiko",
              "Catch",
              "ManiaOther",
              "Mania4k",
              "Mania7k"
            ],
            "type": "object",
            "properties": {
              "Osu": {
                "type": "integer",
                "format": "int32"
              },
              "Taiko": {
                "type": "integer",
                "format": "int32"
              },
              "Catch": {
                "type": "integer",
                "format": "int32"
              },
              "ManiaOther": {
                "type": "integer",
                "format": "int32"
              },
              "Mania4k": {
                "type": "integer",
                "format": "int32"
              },
              "Mania7k": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "description": "Map of Common.Enums.Rulesets to the number of verified Database.Entities.Tournaments in that ruleset"
          },
          "verifiedByLobbySize": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Map of lobby sizes to the number of verified Database.Entities.Tournaments with that lobby size"
          }
        },
        "additionalProperties": false,
        "description": "Represents platform-wide Database.Entities.Tournament stats"
      },
      "TournamentQuerySortType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Id",
          "StartTime",
          "EndTime",
          "SearchQueryRelevance",
          "SubmissionDate",
          "LobbySize"
        ],
        "x-enumDescriptions": [
          "Sort by primary key",
          "Sort by start date",
          "Sort by end date",
          "Sort by name",
          "Sort by submission date",
          "Sort by lobby size"
        ]
      },
      "TournamentRejectionReason": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32
        ],
        "type": "integer",
        "format": "int32",
        "x-bitwiseFlag": true,
        "x-enumNames": [
          "None",
          "NoVerifiedMatches",
          "NotEnoughVerifiedMatches",
          "AbnormalWinCondition",
          "AbnormalFormat",
          "VaryingLobbySize",
          "IncompleteData"
        ],
        "x-enumDescriptions": [
          "The !:Database.Entities.Tournament is not rejected",
          "The !:Database.Entities.Tournament has no !:Database.Entities.Tournament.Matches with a\r\nCommon.Enums.Verification.VerificationStatus of Common.Enums.Verification.VerificationStatus.Verified or Common.Enums.Verification.VerificationStatus.PreVerified",
          "The !:Database.Entities.Tournament's number of !:Database.Entities.Tournament.Matches with a\r\nCommon.Enums.Verification.VerificationStatus of Common.Enums.Verification.VerificationStatus.Verified or\r\nCommon.Enums.Verification.VerificationStatus.PreVerified is below 80% of the total",
          "The !:Database.Entities.Tournament's win condition is not Common.Enums.ScoringType.ScoreV2\n\nOnly assigned via a \"rejected submission\". \n\r\nCovers cases such as gimmicky win conditions, mixed win conditions, etc",
          "The !:Database.Entities.Tournament's format is not suitable for ratings\n\nOnly assigned via a \"rejected submission\". \n\r\nCovers cases such as excessive gimmicks, relax, multiple modes, etc",
          "The !:Database.Entities.Tournament's lobby sizes are not consistent.\n\nOnly assigned via a \"rejected submission\". \n\r\nCovers cases such as > 2 teams in lobby at once, async lobbies, team size gimmicks, varying team sizes, etc",
          "The !:Database.Entities.Tournament's data is incomplete or not recoverable\r\nCovers cases where match links are lost to time, private,\r\nmain sheet is deleted, missing rounds, etc.\n\nOnly assigned via a \"rejected submission\". \n\r\nCovers cases where match links are lost to time / dead / private, main sheet is deleted, missing rounds, etc"
        ]
      },
      "TournamentSearchResultDTO": {
        "required": [
          "id",
          "lobbySize",
          "name",
          "rejectionReason",
          "ruleset",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the tournament",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Ruleset of the tournament"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationStatus"
              }
            ],
            "description": "Verification status of the tournament"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentRejectionReason"
              }
            ],
            "description": "Rejection reason of the tournament"
          },
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of the tournament",
            "nullable": true
          },
          "lobbySize": {
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the tournament"
          }
        },
        "additionalProperties": false,
        "description": "Represents a search result for a tournament"
      },
      "TournamentSubmissionDTO": {
        "required": [
          "abbreviation",
          "beatmapIds",
          "forumUrl",
          "ids",
          "lobbySize",
          "name",
          "rankRangeLowerBound",
          "ruleset"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the tournament"
          },
          "abbreviation": {
            "minLength": 1,
            "type": "string",
            "description": "Acronym / shortened name of the tournament",
            "example": "For osu! World Cup 2023, this value would be \"OWC23\""
          },
          "forumUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The osu! forum post advertising this tournament"
          },
          "rankRangeLowerBound": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Lowest rank a player can be to participate in the tournament",
            "format": "int32"
          },
          "lobbySize": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Expected in-match team size",
            "format": "int32"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "osu! ruleset"
          },
          "rejectionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TournamentRejectionReason"
              }
            ],
            "description": "Optional rejection reason. If set, the created tournament and all matches will be rejected\r\nfor this reason and go through no additional processing (Submissions with a rejection reason will only be accepted from admin users)",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of osu! match ids"
          },
          "beatmapIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A collection of pooled osu! beatmap ids"
          }
        },
        "additionalProperties": false,
        "description": "An incoming tournament submission"
      },
      "UserCompactDTO": {
        "required": [
          "id",
          "player"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "lastLogin": {
            "type": "string",
            "description": "Timestamp of the user's last login to the o!TR website",
            "format": "date-time",
            "nullable": true
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerCompactDTO"
              }
            ],
            "description": "The associated player"
          }
        },
        "additionalProperties": false,
        "description": "Represents user information"
      },
      "UserDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserCompactDTO"
          },
          {
            "type": "object",
            "properties": {
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of permissions granted to the user"
              },
              "settings": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSettingsDTO"
                  }
                ],
                "description": "Settings of the user"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "Represents user information including optional data"
      },
      "UserPlatformStatsDTO": {
        "required": [
          "sumByDate"
        ],
        "type": "object",
        "properties": {
          "sumByDate": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Map of dates to the total number of registered Database.Entities.Users as of that time (One entry per day beginning from the date of the first registered user)"
          }
        },
        "additionalProperties": false,
        "description": "Represents platform-wide Database.Entities.User stats"
      },
      "UserSettingsDTO": {
        "required": [
          "ruleset",
          "rulesetIsControlled"
        ],
        "type": "object",
        "properties": {
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ruleset"
              }
            ],
            "description": "Preferred ruleset of the associated user"
          },
          "rulesetIsControlled": {
            "type": "boolean",
            "description": "Denotes whether the associated user has overwritten their default ruleset (If false, the default ruleset is always the same as the user's default ruleset on the osu! website)"
          }
        },
        "additionalProperties": false,
        "description": "Represents user controlled settings for otr-web"
      },
      "VerificationStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "None",
          "PreRejected",
          "PreVerified",
          "Rejected",
          "Verified"
        ],
        "x-enumDescriptions": [
          "Verification status has not yet been assigned",
          "The Data Worker has identified an issue during processing",
          "The Data Worker has not identified any issues during processing",
          "Determined to be unfit for ratings by manual review",
          "Determined to be fit for ratings by manual review"
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization using the Bearer scheme. Paste **ONLY** your JWT in the text box below",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      },
      "ApiKey": {
        "type": "apiKey",
        "description": "API Key Authorization. Enter your API key in the text box below",
        "name": "X-Api-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}